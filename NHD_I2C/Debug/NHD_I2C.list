
NHD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002874  08002874  00003874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002890  08002890  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002890  08002890  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002890  08002890  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002890  08002890  00003890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002894  08002894  00003894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002898  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080028a4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080028a4  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c5c  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c0  00000000  00000000  0000ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a1  00000000  00000000  0000c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d68  00000000  00000000  0000cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a23d  00000000  00000000  0001ecc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070ec9  00000000  00000000  00028efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000196c  00000000  00000000  00099e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0009b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800285c 	.word	0x0800285c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800285c 	.word	0x0800285c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b08f      	sub	sp, #60	@ 0x3c
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc53 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 fa9d 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fb4d 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 fb0b 	bl	800084c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  const uint16_t devaddr=0x0028;
 8000236:	2322      	movs	r3, #34	@ 0x22
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	801a      	strh	r2, [r3, #0]
  uint16_t c = 4;
 800023e:	232e      	movs	r3, #46	@ 0x2e
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2204      	movs	r2, #4
 8000244:	801a      	strh	r2, [r3, #0]
  uint8_t data = 0;
 8000246:	231f      	movs	r3, #31
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
  uint16_t size = 1;
 800024e:	2320      	movs	r3, #32
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	2201      	movs	r2, #1
 8000254:	801a      	strh	r2, [r3, #0]
  char stringa[24];
  stringa[0] = 'C';
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2243      	movs	r2, #67	@ 0x43
 800025a:	701a      	strb	r2, [r3, #0]
  stringa[1] = 'i';
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2269      	movs	r2, #105	@ 0x69
 8000260:	705a      	strb	r2, [r3, #1]
  stringa[2] = 'a';
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2261      	movs	r2, #97	@ 0x61
 8000266:	709a      	strb	r2, [r3, #2]
  stringa[3] = 'o';
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	226f      	movs	r2, #111	@ 0x6f
 800026c:	70da      	strb	r2, [r3, #3]
  stringa[4] = ' ';
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2220      	movs	r2, #32
 8000272:	711a      	strb	r2, [r3, #4]
  stringa[5] = 'N';
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	224e      	movs	r2, #78	@ 0x4e
 8000278:	715a      	strb	r2, [r3, #5]
  stringa[6] = 'i';
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2269      	movs	r2, #105	@ 0x69
 800027e:	719a      	strb	r2, [r3, #6]
  stringa[7] = 'c';
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2263      	movs	r2, #99	@ 0x63
 8000284:	71da      	strb	r2, [r3, #7]
  stringa[8] = 'o';
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	226f      	movs	r2, #111	@ 0x6f
 800028a:	721a      	strb	r2, [r3, #8]
  stringa[9] = ' ';
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2220      	movs	r2, #32
 8000290:	725a      	strb	r2, [r3, #9]
  stringa[10] = 'a';
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2261      	movs	r2, #97	@ 0x61
 8000296:	729a      	strb	r2, [r3, #10]
  stringa[11] = ' ';
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2220      	movs	r2, #32
 800029c:	72da      	strb	r2, [r3, #11]
  stringa[12] = 'c';
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2263      	movs	r2, #99	@ 0x63
 80002a2:	731a      	strb	r2, [r3, #12]
  stringa[13] = 'o';
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	226f      	movs	r2, #111	@ 0x6f
 80002a8:	735a      	strb	r2, [r3, #13]
  stringa[14] = 's';
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2273      	movs	r2, #115	@ 0x73
 80002ae:	739a      	strb	r2, [r3, #14]
  stringa[15] = 'a';
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2261      	movs	r2, #97	@ 0x61
 80002b4:	73da      	strb	r2, [r3, #15]
  stringa[16] = ' ';
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2220      	movs	r2, #32
 80002ba:	741a      	strb	r2, [r3, #16]
  stringa[17] = 'l';
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	226c      	movs	r2, #108	@ 0x6c
 80002c0:	745a      	strb	r2, [r3, #17]
  stringa[18] = 'a';
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2261      	movs	r2, #97	@ 0x61
 80002c6:	749a      	strb	r2, [r3, #18]
  stringa[19] = 'v';
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2276      	movs	r2, #118	@ 0x76
 80002cc:	74da      	strb	r2, [r3, #19]
  stringa[20] = 'o';
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	226f      	movs	r2, #111	@ 0x6f
 80002d2:	751a      	strb	r2, [r3, #20]
  stringa[21] = 'r';
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2272      	movs	r2, #114	@ 0x72
 80002d8:	755a      	strb	r2, [r3, #21]
  stringa[22] = 'i';
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2269      	movs	r2, #105	@ 0x69
 80002de:	759a      	strb	r2, [r3, #22]
  stringa[23] = '?';
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	223f      	movs	r2, #63	@ 0x3f
 80002e4:	75da      	strb	r2, [r3, #23]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	  if (c > 4) {
 80002e6:	232e      	movs	r3, #46	@ 0x2e
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2b04      	cmp	r3, #4
 80002ee:	d900      	bls.n	80002f2 <main+0xd2>
 80002f0:	e21c      	b.n	800072c <main+0x50c>
		  break;
	  }
	  //call write function
	  //Set Maximum Brightness Backlight
	  HAL_Delay(1000);
 80002f2:	23fa      	movs	r3, #250	@ 0xfa
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fc5a 	bl	8000bb0 <HAL_Delay>
	  //Clear Screen
	  data = 0xFE;
 80002fc:	201f      	movs	r0, #31
 80002fe:	183b      	adds	r3, r7, r0
 8000300:	22fe      	movs	r2, #254	@ 0xfe
 8000302:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 8000304:	2622      	movs	r6, #34	@ 0x22
 8000306:	19bb      	adds	r3, r7, r6
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	18db      	adds	r3, r3, r3
 800030c:	b299      	uxth	r1, r3
 800030e:	2320      	movs	r3, #32
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	881c      	ldrh	r4, [r3, #0]
 8000314:	0005      	movs	r5, r0
 8000316:	183a      	adds	r2, r7, r0
 8000318:	48ce      	ldr	r0, [pc, #824]	@ (8000654 <main+0x434>)
 800031a:	23fa      	movs	r3, #250	@ 0xfa
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	0023      	movs	r3, r4
 8000322:	f000 ff57 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000326:	0003      	movs	r3, r0
 8000328:	001a      	movs	r2, r3
 800032a:	4bcb      	ldr	r3, [pc, #812]	@ (8000658 <main+0x438>)
 800032c:	701a      	strb	r2, [r3, #0]
	  data = 0x51;
 800032e:	0028      	movs	r0, r5
 8000330:	183b      	adds	r3, r7, r0
 8000332:	2251      	movs	r2, #81	@ 0x51
 8000334:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,100);
 8000336:	19bb      	adds	r3, r7, r6
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	18db      	adds	r3, r3, r3
 800033c:	b299      	uxth	r1, r3
 800033e:	2320      	movs	r3, #32
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	0005      	movs	r5, r0
 8000346:	183a      	adds	r2, r7, r0
 8000348:	48c2      	ldr	r0, [pc, #776]	@ (8000654 <main+0x434>)
 800034a:	2464      	movs	r4, #100	@ 0x64
 800034c:	9400      	str	r4, [sp, #0]
 800034e:	f000 ff41 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000352:	0003      	movs	r3, r0
 8000354:	001a      	movs	r2, r3
 8000356:	4bc0      	ldr	r3, [pc, #768]	@ (8000658 <main+0x438>)
 8000358:	701a      	strb	r2, [r3, #0]
	  //Turn OFF Screen
	  data = 0xFE;
 800035a:	0028      	movs	r0, r5
 800035c:	183b      	adds	r3, r7, r0
 800035e:	22fe      	movs	r2, #254	@ 0xfe
 8000360:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 8000362:	19bb      	adds	r3, r7, r6
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	18db      	adds	r3, r3, r3
 8000368:	b299      	uxth	r1, r3
 800036a:	2320      	movs	r3, #32
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	881c      	ldrh	r4, [r3, #0]
 8000370:	0005      	movs	r5, r0
 8000372:	183a      	adds	r2, r7, r0
 8000374:	48b7      	ldr	r0, [pc, #732]	@ (8000654 <main+0x434>)
 8000376:	23fa      	movs	r3, #250	@ 0xfa
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	0023      	movs	r3, r4
 800037e:	f000 ff29 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000382:	0003      	movs	r3, r0
 8000384:	001a      	movs	r2, r3
 8000386:	4bb4      	ldr	r3, [pc, #720]	@ (8000658 <main+0x438>)
 8000388:	701a      	strb	r2, [r3, #0]
	  data = 0x42;
 800038a:	0028      	movs	r0, r5
 800038c:	183b      	adds	r3, r7, r0
 800038e:	2242      	movs	r2, #66	@ 0x42
 8000390:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,100);
 8000392:	19bb      	adds	r3, r7, r6
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	18db      	adds	r3, r3, r3
 8000398:	b299      	uxth	r1, r3
 800039a:	2320      	movs	r3, #32
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	0005      	movs	r5, r0
 80003a2:	183a      	adds	r2, r7, r0
 80003a4:	48ab      	ldr	r0, [pc, #684]	@ (8000654 <main+0x434>)
 80003a6:	2464      	movs	r4, #100	@ 0x64
 80003a8:	9400      	str	r4, [sp, #0]
 80003aa:	f000 ff13 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80003ae:	0003      	movs	r3, r0
 80003b0:	001a      	movs	r2, r3
 80003b2:	4ba9      	ldr	r3, [pc, #676]	@ (8000658 <main+0x438>)
 80003b4:	701a      	strb	r2, [r3, #0]
	  //Underline Cursor OFF
	  data = 0xFE;
 80003b6:	0028      	movs	r0, r5
 80003b8:	183b      	adds	r3, r7, r0
 80003ba:	22fe      	movs	r2, #254	@ 0xfe
 80003bc:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 80003be:	19bb      	adds	r3, r7, r6
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	18db      	adds	r3, r3, r3
 80003c4:	b299      	uxth	r1, r3
 80003c6:	2320      	movs	r3, #32
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	881c      	ldrh	r4, [r3, #0]
 80003cc:	0005      	movs	r5, r0
 80003ce:	183a      	adds	r2, r7, r0
 80003d0:	48a0      	ldr	r0, [pc, #640]	@ (8000654 <main+0x434>)
 80003d2:	23fa      	movs	r3, #250	@ 0xfa
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	0023      	movs	r3, r4
 80003da:	f000 fefb 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80003de:	0003      	movs	r3, r0
 80003e0:	001a      	movs	r2, r3
 80003e2:	4b9d      	ldr	r3, [pc, #628]	@ (8000658 <main+0x438>)
 80003e4:	701a      	strb	r2, [r3, #0]
	  data = 0x48;
 80003e6:	0028      	movs	r0, r5
 80003e8:	183b      	adds	r3, r7, r0
 80003ea:	2248      	movs	r2, #72	@ 0x48
 80003ec:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,100);
 80003ee:	19bb      	adds	r3, r7, r6
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	18db      	adds	r3, r3, r3
 80003f4:	b299      	uxth	r1, r3
 80003f6:	2320      	movs	r3, #32
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	0005      	movs	r5, r0
 80003fe:	183a      	adds	r2, r7, r0
 8000400:	4894      	ldr	r0, [pc, #592]	@ (8000654 <main+0x434>)
 8000402:	2464      	movs	r4, #100	@ 0x64
 8000404:	9400      	str	r4, [sp, #0]
 8000406:	f000 fee5 	bl	80011d4 <HAL_I2C_Master_Transmit>
 800040a:	0003      	movs	r3, r0
 800040c:	001a      	movs	r2, r3
 800040e:	4b92      	ldr	r3, [pc, #584]	@ (8000658 <main+0x438>)
 8000410:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000412:	23fa      	movs	r3, #250	@ 0xfa
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	0018      	movs	r0, r3
 8000418:	f000 fbca 	bl	8000bb0 <HAL_Delay>
	  data = 0xFE;
 800041c:	0028      	movs	r0, r5
 800041e:	183b      	adds	r3, r7, r0
 8000420:	22fe      	movs	r2, #254	@ 0xfe
 8000422:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 8000424:	19bb      	adds	r3, r7, r6
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	18db      	adds	r3, r3, r3
 800042a:	b299      	uxth	r1, r3
 800042c:	2320      	movs	r3, #32
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	881c      	ldrh	r4, [r3, #0]
 8000432:	0005      	movs	r5, r0
 8000434:	183a      	adds	r2, r7, r0
 8000436:	4887      	ldr	r0, [pc, #540]	@ (8000654 <main+0x434>)
 8000438:	23fa      	movs	r3, #250	@ 0xfa
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	0023      	movs	r3, r4
 8000440:	f000 fec8 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000444:	0003      	movs	r3, r0
 8000446:	001a      	movs	r2, r3
 8000448:	4b83      	ldr	r3, [pc, #524]	@ (8000658 <main+0x438>)
 800044a:	701a      	strb	r2, [r3, #0]
	  data = 0x53;
 800044c:	0028      	movs	r0, r5
 800044e:	183b      	adds	r3, r7, r0
 8000450:	2253      	movs	r2, #83	@ 0x53
 8000452:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 8000454:	19bb      	adds	r3, r7, r6
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	18db      	adds	r3, r3, r3
 800045a:	b299      	uxth	r1, r3
 800045c:	2320      	movs	r3, #32
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	881c      	ldrh	r4, [r3, #0]
 8000462:	0005      	movs	r5, r0
 8000464:	183a      	adds	r2, r7, r0
 8000466:	487b      	ldr	r0, [pc, #492]	@ (8000654 <main+0x434>)
 8000468:	23fa      	movs	r3, #250	@ 0xfa
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	0023      	movs	r3, r4
 8000470:	f000 feb0 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000474:	0003      	movs	r3, r0
 8000476:	001a      	movs	r2, r3
 8000478:	4b77      	ldr	r3, [pc, #476]	@ (8000658 <main+0x438>)
 800047a:	701a      	strb	r2, [r3, #0]
	  data = 0x01;
 800047c:	0028      	movs	r0, r5
 800047e:	183b      	adds	r3, r7, r0
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 8000484:	19bb      	adds	r3, r7, r6
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	18db      	adds	r3, r3, r3
 800048a:	b299      	uxth	r1, r3
 800048c:	2320      	movs	r3, #32
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	881c      	ldrh	r4, [r3, #0]
 8000492:	0005      	movs	r5, r0
 8000494:	183a      	adds	r2, r7, r0
 8000496:	486f      	ldr	r0, [pc, #444]	@ (8000654 <main+0x434>)
 8000498:	23fa      	movs	r3, #250	@ 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	0023      	movs	r3, r4
 80004a0:	f000 fe98 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80004a4:	0003      	movs	r3, r0
 80004a6:	001a      	movs	r2, r3
 80004a8:	4b6b      	ldr	r3, [pc, #428]	@ (8000658 <main+0x438>)
 80004aa:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 80004ac:	23fa      	movs	r3, #250	@ 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fb7d 	bl	8000bb0 <HAL_Delay>
	  //Turn Screen ON
	  data = 0xFE;
 80004b6:	0028      	movs	r0, r5
 80004b8:	183b      	adds	r3, r7, r0
 80004ba:	22fe      	movs	r2, #254	@ 0xfe
 80004bc:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 80004be:	19bb      	adds	r3, r7, r6
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	18db      	adds	r3, r3, r3
 80004c4:	b299      	uxth	r1, r3
 80004c6:	2320      	movs	r3, #32
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881c      	ldrh	r4, [r3, #0]
 80004cc:	0005      	movs	r5, r0
 80004ce:	183a      	adds	r2, r7, r0
 80004d0:	4860      	ldr	r0, [pc, #384]	@ (8000654 <main+0x434>)
 80004d2:	23fa      	movs	r3, #250	@ 0xfa
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	0023      	movs	r3, r4
 80004da:	f000 fe7b 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000658 <main+0x438>)
 80004e4:	701a      	strb	r2, [r3, #0]
	  data = 0x41;
 80004e6:	0028      	movs	r0, r5
 80004e8:	183b      	adds	r3, r7, r0
 80004ea:	2241      	movs	r2, #65	@ 0x41
 80004ec:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,100);
 80004ee:	19bb      	adds	r3, r7, r6
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	18db      	adds	r3, r3, r3
 80004f4:	b299      	uxth	r1, r3
 80004f6:	2320      	movs	r3, #32
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	0005      	movs	r5, r0
 80004fe:	183a      	adds	r2, r7, r0
 8000500:	4854      	ldr	r0, [pc, #336]	@ (8000654 <main+0x434>)
 8000502:	2464      	movs	r4, #100	@ 0x64
 8000504:	9400      	str	r4, [sp, #0]
 8000506:	f000 fe65 	bl	80011d4 <HAL_I2C_Master_Transmit>
 800050a:	0003      	movs	r3, r0
 800050c:	001a      	movs	r2, r3
 800050e:	4b52      	ldr	r3, [pc, #328]	@ (8000658 <main+0x438>)
 8000510:	701a      	strb	r2, [r3, #0]
	  //UnderLine Cursor ON
	  data = 0xFE;
 8000512:	0028      	movs	r0, r5
 8000514:	183b      	adds	r3, r7, r0
 8000516:	22fe      	movs	r2, #254	@ 0xfe
 8000518:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 800051a:	19bb      	adds	r3, r7, r6
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	18db      	adds	r3, r3, r3
 8000520:	b299      	uxth	r1, r3
 8000522:	2320      	movs	r3, #32
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	881c      	ldrh	r4, [r3, #0]
 8000528:	0005      	movs	r5, r0
 800052a:	183a      	adds	r2, r7, r0
 800052c:	4849      	ldr	r0, [pc, #292]	@ (8000654 <main+0x434>)
 800052e:	23fa      	movs	r3, #250	@ 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	0023      	movs	r3, r4
 8000536:	f000 fe4d 	bl	80011d4 <HAL_I2C_Master_Transmit>
 800053a:	0003      	movs	r3, r0
 800053c:	001a      	movs	r2, r3
 800053e:	4b46      	ldr	r3, [pc, #280]	@ (8000658 <main+0x438>)
 8000540:	701a      	strb	r2, [r3, #0]
	  data = 0x47;
 8000542:	0028      	movs	r0, r5
 8000544:	183b      	adds	r3, r7, r0
 8000546:	2247      	movs	r2, #71	@ 0x47
 8000548:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,100);
 800054a:	19bb      	adds	r3, r7, r6
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	18db      	adds	r3, r3, r3
 8000550:	b299      	uxth	r1, r3
 8000552:	2320      	movs	r3, #32
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	0005      	movs	r5, r0
 800055a:	183a      	adds	r2, r7, r0
 800055c:	483d      	ldr	r0, [pc, #244]	@ (8000654 <main+0x434>)
 800055e:	2464      	movs	r4, #100	@ 0x64
 8000560:	9400      	str	r4, [sp, #0]
 8000562:	f000 fe37 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000566:	0003      	movs	r3, r0
 8000568:	001a      	movs	r2, r3
 800056a:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <main+0x438>)
 800056c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800056e:	23fa      	movs	r3, #250	@ 0xfa
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fb1c 	bl	8000bb0 <HAL_Delay>
	  //Set Maximum Brightness Backlight
	  data = 0xFE;
 8000578:	0028      	movs	r0, r5
 800057a:	183b      	adds	r3, r7, r0
 800057c:	22fe      	movs	r2, #254	@ 0xfe
 800057e:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	18db      	adds	r3, r3, r3
 8000586:	b299      	uxth	r1, r3
 8000588:	2320      	movs	r3, #32
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	881c      	ldrh	r4, [r3, #0]
 800058e:	0005      	movs	r5, r0
 8000590:	183a      	adds	r2, r7, r0
 8000592:	4830      	ldr	r0, [pc, #192]	@ (8000654 <main+0x434>)
 8000594:	23fa      	movs	r3, #250	@ 0xfa
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	0023      	movs	r3, r4
 800059c:	f000 fe1a 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80005a0:	0003      	movs	r3, r0
 80005a2:	001a      	movs	r2, r3
 80005a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000658 <main+0x438>)
 80005a6:	701a      	strb	r2, [r3, #0]
	  data = 0x53;
 80005a8:	0028      	movs	r0, r5
 80005aa:	183b      	adds	r3, r7, r0
 80005ac:	2253      	movs	r2, #83	@ 0x53
 80005ae:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 80005b0:	19bb      	adds	r3, r7, r6
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	18db      	adds	r3, r3, r3
 80005b6:	b299      	uxth	r1, r3
 80005b8:	2320      	movs	r3, #32
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	881c      	ldrh	r4, [r3, #0]
 80005be:	0005      	movs	r5, r0
 80005c0:	183a      	adds	r2, r7, r0
 80005c2:	4824      	ldr	r0, [pc, #144]	@ (8000654 <main+0x434>)
 80005c4:	23fa      	movs	r3, #250	@ 0xfa
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	0023      	movs	r3, r4
 80005cc:	f000 fe02 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80005d0:	0003      	movs	r3, r0
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <main+0x438>)
 80005d6:	701a      	strb	r2, [r3, #0]
	  data = 0x08;
 80005d8:	0028      	movs	r0, r5
 80005da:	183b      	adds	r3, r7, r0
 80005dc:	2208      	movs	r2, #8
 80005de:	701a      	strb	r2, [r3, #0]
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 80005e0:	19bb      	adds	r3, r7, r6
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	18db      	adds	r3, r3, r3
 80005e6:	b299      	uxth	r1, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	881c      	ldrh	r4, [r3, #0]
 80005ee:	183a      	adds	r2, r7, r0
 80005f0:	4818      	ldr	r0, [pc, #96]	@ (8000654 <main+0x434>)
 80005f2:	23fa      	movs	r3, #250	@ 0xfa
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	0023      	movs	r3, r4
 80005fa:	f000 fdeb 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80005fe:	0003      	movs	r3, r0
 8000600:	001a      	movs	r2, r3
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <main+0x438>)
 8000604:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<16;i++)
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800060a:	e01d      	b.n	8000648 <main+0x428>
	  {
		  data = (uint8_t)(stringa[i]);
 800060c:	1d3a      	adds	r2, r7, #4
 800060e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	201f      	movs	r0, #31
 8000616:	183b      	adds	r3, r7, r0
 8000618:	701a      	strb	r2, [r3, #0]
		  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 800061a:	2322      	movs	r3, #34	@ 0x22
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	18db      	adds	r3, r3, r3
 8000622:	b299      	uxth	r1, r3
 8000624:	2320      	movs	r3, #32
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	881c      	ldrh	r4, [r3, #0]
 800062a:	183a      	adds	r2, r7, r0
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <main+0x434>)
 800062e:	23fa      	movs	r3, #250	@ 0xfa
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	0023      	movs	r3, r4
 8000636:	f000 fdcd 	bl	80011d4 <HAL_I2C_Master_Transmit>
 800063a:	0003      	movs	r3, r0
 800063c:	001a      	movs	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <main+0x438>)
 8000640:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<16;i++)
 8000642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000644:	3301      	adds	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800064a:	2b0f      	cmp	r3, #15
 800064c:	ddde      	ble.n	800060c <main+0x3ec>
	  data = 0x45;
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
	  data = 0x40;
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
	  */
	  for(int i=16;i<24;i++)
 800064e:	2310      	movs	r3, #16
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
 8000652:	e021      	b.n	8000698 <main+0x478>
 8000654:	20000028 	.word	0x20000028
 8000658:	2000007c 	.word	0x2000007c
	  {
		  data = (uint8_t)(stringa[i]);
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	201f      	movs	r0, #31
 8000666:	183b      	adds	r3, r7, r0
 8000668:	701a      	strb	r2, [r3, #0]
		  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 800066a:	2322      	movs	r3, #34	@ 0x22
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	18db      	adds	r3, r3, r3
 8000672:	b299      	uxth	r1, r3
 8000674:	2320      	movs	r3, #32
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	881c      	ldrh	r4, [r3, #0]
 800067a:	183a      	adds	r2, r7, r0
 800067c:	4838      	ldr	r0, [pc, #224]	@ (8000760 <main+0x540>)
 800067e:	23fa      	movs	r3, #250	@ 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	0023      	movs	r3, r4
 8000686:	f000 fda5 	bl	80011d4 <HAL_I2C_Master_Transmit>
 800068a:	0003      	movs	r3, r0
 800068c:	001a      	movs	r2, r3
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <main+0x544>)
 8000690:	701a      	strb	r2, [r3, #0]
	  for(int i=16;i<24;i++)
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	3301      	adds	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	2b17      	cmp	r3, #23
 800069c:	ddde      	ble.n	800065c <main+0x43c>
	  }
	  /*data = 0x41;
	  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr,&data,size,100);
	  */
	  if (status == HAL_OK)
 800069e:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <main+0x544>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d13b      	bne.n	800071e <main+0x4fe>
	  {
		  /*data = (uint8_t)(c+0x30);
		  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
		  */
		  HAL_Delay(1000);
 80006a6:	23fa      	movs	r3, #250	@ 0xfa
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa80 	bl	8000bb0 <HAL_Delay>
		  while(1){
			  HAL_Delay(300);
 80006b0:	2396      	movs	r3, #150	@ 0x96
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fa7b 	bl	8000bb0 <HAL_Delay>
			//Move Display by one place
			  data = 0xFE;
 80006ba:	201f      	movs	r0, #31
 80006bc:	183b      	adds	r3, r7, r0
 80006be:	22fe      	movs	r2, #254	@ 0xfe
 80006c0:	701a      	strb	r2, [r3, #0]
			  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 80006c2:	2622      	movs	r6, #34	@ 0x22
 80006c4:	19bb      	adds	r3, r7, r6
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	18db      	adds	r3, r3, r3
 80006ca:	b299      	uxth	r1, r3
 80006cc:	2320      	movs	r3, #32
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	881c      	ldrh	r4, [r3, #0]
 80006d2:	0005      	movs	r5, r0
 80006d4:	183a      	adds	r2, r7, r0
 80006d6:	4822      	ldr	r0, [pc, #136]	@ (8000760 <main+0x540>)
 80006d8:	23fa      	movs	r3, #250	@ 0xfa
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	0023      	movs	r3, r4
 80006e0:	f000 fd78 	bl	80011d4 <HAL_I2C_Master_Transmit>
 80006e4:	0003      	movs	r3, r0
 80006e6:	001a      	movs	r2, r3
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <main+0x544>)
 80006ea:	701a      	strb	r2, [r3, #0]
			  data = 0x55;
 80006ec:	0028      	movs	r0, r5
 80006ee:	183b      	adds	r3, r7, r0
 80006f0:	2255      	movs	r2, #85	@ 0x55
 80006f2:	701a      	strb	r2, [r3, #0]
			  status = HAL_I2C_Master_Transmit(&hi2c1,devaddr<<1,&data,size,1000);
 80006f4:	19bb      	adds	r3, r7, r6
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	18db      	adds	r3, r3, r3
 80006fa:	b299      	uxth	r1, r3
 80006fc:	2320      	movs	r3, #32
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	881c      	ldrh	r4, [r3, #0]
 8000702:	183a      	adds	r2, r7, r0
 8000704:	4816      	ldr	r0, [pc, #88]	@ (8000760 <main+0x540>)
 8000706:	23fa      	movs	r3, #250	@ 0xfa
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	0023      	movs	r3, r4
 800070e:	f000 fd61 	bl	80011d4 <HAL_I2C_Master_Transmit>
 8000712:	0003      	movs	r3, r0
 8000714:	001a      	movs	r2, r3
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <main+0x544>)
 8000718:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(300);
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	e7c8      	b.n	80006b0 <main+0x490>
		  }
		  break;
	  }
	  else
	  {
		  c += 1;
 800071e:	222e      	movs	r2, #46	@ 0x2e
 8000720:	18bb      	adds	r3, r7, r2
 8000722:	18ba      	adds	r2, r7, r2
 8000724:	8812      	ldrh	r2, [r2, #0]
 8000726:	3201      	adds	r2, #1
 8000728:	801a      	strh	r2, [r3, #0]
	  if (c > 4) {
 800072a:	e5dc      	b.n	80002e6 <main+0xc6>
		  break;
 800072c:	46c0      	nop			@ (mov r8, r8)
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
	if (status == HAL_OK)
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <main+0x544>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d107      	bne.n	8000746 <main+0x526>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000736:	23a0      	movs	r3, #160	@ 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2201      	movs	r2, #1
 800073c:	2120      	movs	r1, #32
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fc84 	bl	800104c <HAL_GPIO_WritePin>
 8000744:	e006      	b.n	8000754 <main+0x534>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fc7c 	bl	800104c <HAL_GPIO_WritePin>
 8000754:	2300      	movs	r3, #0
	}
  /* USER CODE END 3 */
}
 8000756:	0018      	movs	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	b00d      	add	sp, #52	@ 0x34
 800075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	20000028 	.word	0x20000028
 8000764:	2000007c 	.word	0x2000007c

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b09d      	sub	sp, #116	@ 0x74
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	2438      	movs	r4, #56	@ 0x38
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	2338      	movs	r3, #56	@ 0x38
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f002 f843 	bl	8002804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077e:	2324      	movs	r3, #36	@ 0x24
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 f83b 	bl	8002804 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078e:	003b      	movs	r3, r7
 8000790:	0018      	movs	r0, r3
 8000792:	2324      	movs	r3, #36	@ 0x24
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 f834 	bl	8002804 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <SystemClock_Config+0xdc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a29      	ldr	r2, [pc, #164]	@ (8000848 <SystemClock_Config+0xe0>)
 80007a2:	401a      	ands	r2, r3
 80007a4:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <SystemClock_Config+0xdc>)
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	0109      	lsls	r1, r1, #4
 80007aa:	430a      	orrs	r2, r1
 80007ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	0252      	lsls	r2, r2, #9
 80007bc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2202      	movs	r2, #2
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	0252      	lsls	r2, r2, #9
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	22c0      	movs	r2, #192	@ 0xc0
 80007d0:	0312      	lsls	r2, r2, #12
 80007d2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	03d2      	lsls	r2, r2, #15
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 f8f0 	bl	80019c4 <HAL_RCC_OscConfig>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007e8:	f000 f8cc 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	2124      	movs	r1, #36	@ 0x24
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	220f      	movs	r2, #15
 80007f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2203      	movs	r2, #3
 80007f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2101      	movs	r1, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fc9b 	bl	800214c <HAL_RCC_ClockConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800081a:	f000 f8b3 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800081e:	003b      	movs	r3, r7
 8000820:	2208      	movs	r2, #8
 8000822:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000824:	003b      	movs	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fe5b 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000836:	f000 f8a5 	bl	8000984 <Error_Handler>
  }
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b01d      	add	sp, #116	@ 0x74
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40007000 	.word	0x40007000
 8000848:	ffffe7ff 	.word	0xffffe7ff

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC000096F;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fbfd 	bl	8001088 <HAL_I2C_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f877 	bl	8000984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000898:	2100      	movs	r1, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fffa 	bl	8001894 <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f86e 	bl	8000984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <MX_I2C1_Init+0x74>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f83d 	bl	800192c <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f865 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000028 	.word	0x20000028
 80008c4:	40005400 	.word	0x40005400
 80008c8:	c000096f 	.word	0xc000096f

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	@ 0x2c
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	2414      	movs	r4, #20
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	0018      	movs	r0, r3
 80008d8:	2314      	movs	r3, #20
 80008da:	001a      	movs	r2, r3
 80008dc:	2100      	movs	r1, #0
 80008de:	f001 ff91 	bl	8002804 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_GPIO_Init+0xb4>)
 80008e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_GPIO_Init+0xb4>)
 80008e8:	2104      	movs	r1, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_GPIO_Init+0xb4>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	2204      	movs	r2, #4
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_GPIO_Init+0xb4>)
 80008fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	430a      	orrs	r2, r1
 8000904:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090a:	2280      	movs	r2, #128	@ 0x80
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000918:	2101      	movs	r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000922:	2201      	movs	r2, #1
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_GPIO_Init+0xb4>)
 800092c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000930:	2102      	movs	r1, #2
 8000932:	430a      	orrs	r2, r1
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_GPIO_Init+0xb4>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	2202      	movs	r2, #2
 800093c:	4013      	ands	r3, r2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000942:	23a0      	movs	r3, #160	@ 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fb7e 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f9f4 	bl	8000d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b00b      	add	sp, #44	@ 0x2c
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <HAL_MspInit+0x24>)
 8000996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x24>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <HAL_MspInit+0x24>)
 80009a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_MspInit+0x24>)
 80009a6:	2180      	movs	r1, #128	@ 0x80
 80009a8:	0549      	lsls	r1, r1, #21
 80009aa:	430a      	orrs	r2, r1
 80009ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	@ 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	240c      	movs	r4, #12
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f001 ff1a 	bl	8002804 <memset>
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_I2C_MspInit+0x7c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d128      	bne.n	8000a2c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_I2C_MspInit+0x80>)
 80009dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <HAL_I2C_MspInit+0x80>)
 80009e0:	2102      	movs	r1, #2
 80009e2:	430a      	orrs	r2, r1
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <HAL_I2C_MspInit+0x80>)
 80009e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ea:	2202      	movs	r2, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	22c0      	movs	r2, #192	@ 0xc0
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2212      	movs	r2, #18
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <HAL_I2C_MspInit+0x84>)
 8000a16:	0019      	movs	r1, r3
 8000a18:	0010      	movs	r0, r2
 8000a1a:	f000 f9a1 	bl	8000d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_I2C_MspInit+0x80>)
 8000a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_I2C_MspInit+0x80>)
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	0389      	lsls	r1, r1, #14
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b009      	add	sp, #36	@ 0x24
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	50000400 	.word	0x50000400

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f886 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a7c:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f7ff fff7 	bl	8000a72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f001 feb3 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fbb7 	bl	8000220 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   r0, =_estack
 8000ab4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	08002898 	.word	0x08002898
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	20000084 	.word	0x20000084

08000acc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_COMP_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_Init+0x3c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_Init+0x3c>)
 8000ae2:	2140      	movs	r1, #64	@ 0x40
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f811 	bl	8000b10 <HAL_InitTick>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d003      	beq.n	8000afa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e001      	b.n	8000afe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afa:	f7ff ff49 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_InitTick+0x5c>)
 8000b1a:	681c      	ldr	r4, [r3, #0]
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_InitTick+0x60>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	0019      	movs	r1, r3
 8000b22:	23fa      	movs	r3, #250	@ 0xfa
 8000b24:	0098      	lsls	r0, r3, #2
 8000b26:	f7ff faef 	bl	8000108 <__udivsi3>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0020      	movs	r0, r4
 8000b30:	f7ff faea 	bl	8000108 <__udivsi3>
 8000b34:	0003      	movs	r3, r0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 f905 	bl	8000d46 <HAL_SYSTICK_Config>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e00f      	b.n	8000b64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d80b      	bhi.n	8000b62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	425b      	negs	r3, r3
 8000b50:	2200      	movs	r2, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 f8e2 	bl	8000d1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_InitTick+0x64>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b003      	add	sp, #12
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	18d2      	adds	r2, r2, r3
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000080 	.word	0x20000080

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	@ (8000bac <HAL_GetTick+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000080 	.word	0x20000080

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff fff0 	bl	8000b9c <HAL_GetTick>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_Delay+0x44>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	001a      	movs	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	189b      	adds	r3, r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	f7ff ffe0 	bl	8000b9c <HAL_GetTick>
 8000bdc:	0002      	movs	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b004      	add	sp, #16
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	0002      	movs	r2, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c0c:	d828      	bhi.n	8000c60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ccc <__NVIC_SetPriority+0xd4>)
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	33c0      	adds	r3, #192	@ 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	589b      	ldr	r3, [r3, r2]
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	400a      	ands	r2, r1
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	21ff      	movs	r1, #255	@ 0xff
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	401a      	ands	r2, r3
 8000c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	22ff      	movs	r2, #255	@ 0xff
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	2303      	movs	r3, #3
 8000c46:	4003      	ands	r3, r0
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <__NVIC_SetPriority+0xd4>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	430a      	orrs	r2, r1
 8000c58:	33c0      	adds	r3, #192	@ 0xc0
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c5e:	e031      	b.n	8000cc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c60:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd0 <__NVIC_SetPriority+0xd8>)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0019      	movs	r1, r3
 8000c68:	230f      	movs	r3, #15
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	3b08      	subs	r3, #8
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3306      	adds	r3, #6
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	3304      	adds	r3, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	1dfa      	adds	r2, r7, #7
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	0011      	movs	r1, r2
 8000c80:	2203      	movs	r2, #3
 8000c82:	400a      	ands	r2, r1
 8000c84:	00d2      	lsls	r2, r2, #3
 8000c86:	21ff      	movs	r1, #255	@ 0xff
 8000c88:	4091      	lsls	r1, r2
 8000c8a:	000a      	movs	r2, r1
 8000c8c:	43d2      	mvns	r2, r2
 8000c8e:	401a      	ands	r2, r3
 8000c90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	22ff      	movs	r2, #255	@ 0xff
 8000c98:	401a      	ands	r2, r3
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	4003      	ands	r3, r0
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca8:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <__NVIC_SetPriority+0xd8>)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	001c      	movs	r4, r3
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	4023      	ands	r3, r4
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	3306      	adds	r3, #6
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	18c3      	adds	r3, r0, r3
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b003      	add	sp, #12
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	045b      	lsls	r3, r3, #17
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d301      	bcc.n	8000cec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e010      	b.n	8000d0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <SysTick_Config+0x44>)
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff7c 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x44>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x44>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	210f      	movs	r1, #15
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	1c02      	adds	r2, r0, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff ffbf 	bl	8000cd4 <SysTick_Config>
 8000d56:	0003      	movs	r3, r0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d76:	e14f      	b.n	8001018 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <HAL_GPIO_Init+0x30>
 8000d8e:	e140      	b.n	8001012 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d005      	beq.n	8000da8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d130      	bne.n	8000e0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	409a      	lsls	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	43da      	mvns	r2, r3
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dde:	2201      	movs	r2, #1
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	2201      	movs	r2, #1
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d017      	beq.n	8000e46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d123      	bne.n	8000e9a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2207      	movs	r2, #7
 8000e64:	4013      	ands	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	400b      	ands	r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	23c0      	movs	r3, #192	@ 0xc0
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d100      	bne.n	8000edc <HAL_GPIO_Init+0x17c>
 8000eda:	e09a      	b.n	8001012 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	4b54      	ldr	r3, [pc, #336]	@ (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ee0:	4b53      	ldr	r3, [pc, #332]	@ (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee8:	4a52      	ldr	r2, [pc, #328]	@ (8001034 <HAL_GPIO_Init+0x2d4>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	589b      	ldr	r3, [r3, r2]
 8000ef4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4013      	ands	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	23a0      	movs	r3, #160	@ 0xa0
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x1ea>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a47      	ldr	r2, [pc, #284]	@ (8001038 <HAL_GPIO_Init+0x2d8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1e6>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a46      	ldr	r2, [pc, #280]	@ (800103c <HAL_GPIO_Init+0x2dc>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1e2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a45      	ldr	r2, [pc, #276]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1de>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a44      	ldr	r2, [pc, #272]	@ (8001044 <HAL_GPIO_Init+0x2e4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1da>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	2103      	movs	r1, #3
 8000f50:	400a      	ands	r2, r1
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	@ (8001034 <HAL_GPIO_Init+0x2d4>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	035b      	lsls	r3, r3, #13
 8000f82:	4013      	ands	r3, r2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	039b      	lsls	r3, r3, #14
 8000fac:	4013      	ands	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	2380      	movs	r3, #128	@ 0x80
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_GPIO_Init+0x2e8>)
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	40da      	lsrs	r2, r3
 8001020:	1e13      	subs	r3, r2, #0
 8001022:	d000      	beq.n	8001026 <HAL_GPIO_Init+0x2c6>
 8001024:	e6a8      	b.n	8000d78 <HAL_GPIO_Init+0x18>
  }
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b006      	add	sp, #24
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	50000400 	.word	0x50000400
 800103c:	50000800 	.word	0x50000800
 8001040:	50000c00 	.word	0x50000c00
 8001044:	50001c00 	.word	0x50001c00
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	0008      	movs	r0, r1
 8001056:	0011      	movs	r1, r2
 8001058:	1cbb      	adds	r3, r7, #2
 800105a:	1c02      	adds	r2, r0, #0
 800105c:	801a      	strh	r2, [r3, #0]
 800105e:	1c7b      	adds	r3, r7, #1
 8001060:	1c0a      	adds	r2, r1, #0
 8001062:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001064:	1c7b      	adds	r3, r7, #1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106c:	1cbb      	adds	r3, r7, #2
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001076:	1cbb      	adds	r3, r7, #2
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e08f      	b.n	80011ba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2241      	movs	r2, #65	@ 0x41
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d107      	bne.n	80010b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2240      	movs	r2, #64	@ 0x40
 80010aa:	2100      	movs	r1, #0
 80010ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff fc81 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2241      	movs	r2, #65	@ 0x41
 80010ba:	2124      	movs	r1, #36	@ 0x24
 80010bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	438a      	bics	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	493b      	ldr	r1, [pc, #236]	@ (80011c4 <HAL_I2C_Init+0x13c>)
 80010d8:	400a      	ands	r2, r1
 80010da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4938      	ldr	r1, [pc, #224]	@ (80011c8 <HAL_I2C_Init+0x140>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	0209      	lsls	r1, r1, #8
 8001100:	430a      	orrs	r2, r1
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	e007      	b.n	8001116 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2184      	movs	r1, #132	@ 0x84
 8001110:	0209      	lsls	r1, r1, #8
 8001112:	430a      	orrs	r2, r1
 8001114:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d109      	bne.n	8001132 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	0109      	lsls	r1, r1, #4
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	e007      	b.n	8001142 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4923      	ldr	r1, [pc, #140]	@ (80011cc <HAL_I2C_Init+0x144>)
 800113e:	400a      	ands	r2, r1
 8001140:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4920      	ldr	r1, [pc, #128]	@ (80011d0 <HAL_I2C_Init+0x148>)
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	491a      	ldr	r1, [pc, #104]	@ (80011c8 <HAL_I2C_Init+0x140>)
 800115e:	400a      	ands	r2, r1
 8001160:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	431a      	orrs	r2, r3
 800116c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69d9      	ldr	r1, [r3, #28]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2101      	movs	r1, #1
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2241      	movs	r2, #65	@ 0x41
 80011a6:	2120      	movs	r1, #32
 80011a8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2242      	movs	r2, #66	@ 0x42
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	f0ffffff 	.word	0xf0ffffff
 80011c8:	ffff7fff 	.word	0xffff7fff
 80011cc:	fffff7ff 	.word	0xfffff7ff
 80011d0:	02008000 	.word	0x02008000

080011d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	0008      	movs	r0, r1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	0019      	movs	r1, r3
 80011e2:	230a      	movs	r3, #10
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	1c02      	adds	r2, r0, #0
 80011e8:	801a      	strh	r2, [r3, #0]
 80011ea:	2308      	movs	r3, #8
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	1c0a      	adds	r2, r1, #0
 80011f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2241      	movs	r2, #65	@ 0x41
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d000      	beq.n	8001200 <HAL_I2C_Master_Transmit+0x2c>
 80011fe:	e10a      	b.n	8001416 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2240      	movs	r2, #64	@ 0x40
 8001204:	5c9b      	ldrb	r3, [r3, r2]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_I2C_Master_Transmit+0x3a>
 800120a:	2302      	movs	r3, #2
 800120c:	e104      	b.n	8001418 <HAL_I2C_Master_Transmit+0x244>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2240      	movs	r2, #64	@ 0x40
 8001212:	2101      	movs	r1, #1
 8001214:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001216:	f7ff fcc1 	bl	8000b9c <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	0219      	lsls	r1, r3, #8
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2319      	movs	r3, #25
 800122a:	2201      	movs	r2, #1
 800122c:	f000 f91e 	bl	800146c <I2C_WaitOnFlagUntilTimeout>
 8001230:	1e03      	subs	r3, r0, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0ef      	b.n	8001418 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2241      	movs	r2, #65	@ 0x41
 800123c:	2121      	movs	r1, #33	@ 0x21
 800123e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2242      	movs	r2, #66	@ 0x42
 8001244:	2110      	movs	r1, #16
 8001246:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2208      	movs	r2, #8
 8001258:	18ba      	adds	r2, r7, r2
 800125a:	8812      	ldrh	r2, [r2, #0]
 800125c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001268:	b29b      	uxth	r3, r3
 800126a:	2bff      	cmp	r3, #255	@ 0xff
 800126c:	d906      	bls.n	800127c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	22ff      	movs	r2, #255	@ 0xff
 8001272:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	045b      	lsls	r3, r3, #17
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e007      	b.n	800128c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d027      	beq.n	80012e4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012bc:	3b01      	subs	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	697c      	ldr	r4, [r7, #20]
 80012d0:	230a      	movs	r3, #10
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	8819      	ldrh	r1, [r3, #0]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <HAL_I2C_Master_Transmit+0x24c>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	0023      	movs	r3, r4
 80012de:	f000 fa9f 	bl	8001820 <I2C_TransferConfig>
 80012e2:	e06f      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	697c      	ldr	r4, [r7, #20]
 80012ec:	230a      	movs	r3, #10
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	8819      	ldrh	r1, [r3, #0]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <HAL_I2C_Master_Transmit+0x24c>)
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	0023      	movs	r3, r4
 80012fa:	f000 fa91 	bl	8001820 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012fe:	e061      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f908 	bl	800151c <I2C_WaitOnTXISFlagUntilTimeout>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e081      	b.n	8001418 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132e:	b29b      	uxth	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800133c:	3b01      	subs	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001348:	b29b      	uxth	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03a      	beq.n	80013c4 <HAL_I2C_Master_Transmit+0x1f0>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001352:	2b00      	cmp	r3, #0
 8001354:	d136      	bne.n	80013c4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	0013      	movs	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	f000 f882 	bl	800146c <I2C_WaitOnFlagUntilTimeout>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e053      	b.n	8001418 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d911      	bls.n	800139e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	22ff      	movs	r2, #255	@ 0xff
 800137e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001384:	b2da      	uxtb	r2, r3
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	045c      	lsls	r4, r3, #17
 800138a:	230a      	movs	r3, #10
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	8819      	ldrh	r1, [r3, #0]
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	0023      	movs	r3, r4
 8001398:	f000 fa42 	bl	8001820 <I2C_TransferConfig>
 800139c:	e012      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	049c      	lsls	r4, r3, #18
 80013b2:	230a      	movs	r3, #10
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	8819      	ldrh	r1, [r3, #0]
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	0023      	movs	r3, r4
 80013c0:	f000 fa2e 	bl	8001820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d198      	bne.n	8001300 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 f8e7 	bl	80015a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e01a      	b.n	8001418 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2220      	movs	r2, #32
 80013e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	490b      	ldr	r1, [pc, #44]	@ (8001424 <HAL_I2C_Master_Transmit+0x250>)
 80013f6:	400a      	ands	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2241      	movs	r2, #65	@ 0x41
 80013fe:	2120      	movs	r1, #32
 8001400:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2242      	movs	r2, #66	@ 0x42
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2240      	movs	r2, #64	@ 0x40
 800140e:	2100      	movs	r1, #0
 8001410:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001416:	2302      	movs	r3, #2
  }
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b007      	add	sp, #28
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	80002000 	.word	0x80002000
 8001424:	fe00e800 	.word	0xfe00e800

08001428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2202      	movs	r2, #2
 8001438:	4013      	ands	r3, r2
 800143a:	2b02      	cmp	r3, #2
 800143c:	d103      	bne.n	8001446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2201      	movs	r2, #1
 800144e:	4013      	ands	r3, r2
 8001450:	2b01      	cmp	r3, #1
 8001452:	d007      	beq.n	8001464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	619a      	str	r2, [r3, #24]
  }
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800147c:	e03a      	b.n	80014f4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 f8d3 	bl	8001630 <I2C_IsErrorOccurred>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e040      	b.n	8001514 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	d02d      	beq.n	80014f4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001498:	f7ff fb80 	bl	8000b9c <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d302      	bcc.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x42>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d122      	bne.n	80014f4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4013      	ands	r3, r2
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	425a      	negs	r2, r3
 80014be:	4153      	adcs	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	001a      	movs	r2, r3
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d113      	bne.n	80014f4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d0:	2220      	movs	r2, #32
 80014d2:	431a      	orrs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2241      	movs	r2, #65	@ 0x41
 80014dc:	2120      	movs	r1, #32
 80014de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2242      	movs	r2, #66	@ 0x42
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2240      	movs	r2, #64	@ 0x40
 80014ec:	2100      	movs	r1, #0
 80014ee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e00f      	b.n	8001514 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4013      	ands	r3, r2
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	425a      	negs	r2, r3
 8001504:	4153      	adcs	r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	001a      	movs	r2, r3
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d0b5      	beq.n	800147e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}

0800151c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001528:	e032      	b.n	8001590 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	0018      	movs	r0, r3
 8001532:	f000 f87d 	bl	8001630 <I2C_IsErrorOccurred>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d001      	beq.n	800153e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e030      	b.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3301      	adds	r3, #1
 8001542:	d025      	beq.n	8001590 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001544:	f7ff fb2a 	bl	8000b9c <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	429a      	cmp	r2, r3
 8001552:	d302      	bcc.n	800155a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11a      	bne.n	8001590 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2202      	movs	r2, #2
 8001562:	4013      	ands	r3, r2
 8001564:	2b02      	cmp	r3, #2
 8001566:	d013      	beq.n	8001590 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156c:	2220      	movs	r2, #32
 800156e:	431a      	orrs	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2241      	movs	r2, #65	@ 0x41
 8001578:	2120      	movs	r1, #32
 800157a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2242      	movs	r2, #66	@ 0x42
 8001580:	2100      	movs	r1, #0
 8001582:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2240      	movs	r2, #64	@ 0x40
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e007      	b.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d1c5      	bne.n	800152a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b4:	e02f      	b.n	8001616 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	0018      	movs	r0, r3
 80015be:	f000 f837 	bl	8001630 <I2C_IsErrorOccurred>
 80015c2:	1e03      	subs	r3, r0, #0
 80015c4:	d001      	beq.n	80015ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e02d      	b.n	8001626 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ca:	f7ff fae7 	bl	8000b9c <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d302      	bcc.n	80015e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d11a      	bne.n	8001616 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2220      	movs	r2, #32
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b20      	cmp	r3, #32
 80015ec:	d013      	beq.n	8001616 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	2220      	movs	r2, #32
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2241      	movs	r2, #65	@ 0x41
 80015fe:	2120      	movs	r1, #32
 8001600:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2242      	movs	r2, #66	@ 0x42
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2240      	movs	r2, #64	@ 0x40
 800160e:	2100      	movs	r1, #0
 8001610:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e007      	b.n	8001626 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2220      	movs	r2, #32
 800161e:	4013      	ands	r3, r2
 8001620:	2b20      	cmp	r3, #32
 8001622:	d1c8      	bne.n	80015b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b004      	add	sp, #16
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2327      	movs	r3, #39	@ 0x27
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2210      	movs	r2, #16
 8001658:	4013      	ands	r3, r2
 800165a:	d100      	bne.n	800165e <I2C_IsErrorOccurred+0x2e>
 800165c:	e079      	b.n	8001752 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2210      	movs	r2, #16
 8001664:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001666:	e057      	b.n	8001718 <I2C_IsErrorOccurred+0xe8>
 8001668:	2227      	movs	r2, #39	@ 0x27
 800166a:	18bb      	adds	r3, r7, r2
 800166c:	18ba      	adds	r2, r7, r2
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3301      	adds	r3, #1
 8001676:	d04f      	beq.n	8001718 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001678:	f7ff fa90 	bl	8000b9c <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	429a      	cmp	r2, r3
 8001686:	d302      	bcc.n	800168e <I2C_IsErrorOccurred+0x5e>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d144      	bne.n	8001718 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4013      	ands	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800169c:	2013      	movs	r0, #19
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	2142      	movs	r1, #66	@ 0x42
 80016a4:	5c52      	ldrb	r2, [r2, r1]
 80016a6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	401a      	ands	r2, r3
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d126      	bne.n	800170a <I2C_IsErrorOccurred+0xda>
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	01db      	lsls	r3, r3, #7
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d021      	beq.n	800170a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d01d      	beq.n	800170a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	01c9      	lsls	r1, r1, #7
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016e0:	f7ff fa5c 	bl	8000b9c <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e8:	e00f      	b.n	800170a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016ea:	f7ff fa57 	bl	8000b9c <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b19      	cmp	r3, #25
 80016f6:	d908      	bls.n	800170a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	2220      	movs	r2, #32
 80016fc:	4313      	orrs	r3, r2
 80016fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001700:	2327      	movs	r3, #39	@ 0x27
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]

              break;
 8001708:	e006      	b.n	8001718 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2220      	movs	r2, #32
 8001712:	4013      	ands	r3, r2
 8001714:	2b20      	cmp	r3, #32
 8001716:	d1e8      	bne.n	80016ea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2220      	movs	r2, #32
 8001720:	4013      	ands	r3, r2
 8001722:	2b20      	cmp	r3, #32
 8001724:	d004      	beq.n	8001730 <I2C_IsErrorOccurred+0x100>
 8001726:	2327      	movs	r3, #39	@ 0x27
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d09b      	beq.n	8001668 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001730:	2327      	movs	r3, #39	@ 0x27
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2220      	movs	r2, #32
 8001740:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	2204      	movs	r2, #4
 8001746:	4313      	orrs	r3, r2
 8001748:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800174a:	2327      	movs	r3, #39	@ 0x27
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4013      	ands	r3, r2
 8001762:	d00c      	beq.n	800177e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2201      	movs	r2, #1
 8001768:	4313      	orrs	r3, r2
 800176a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	0052      	lsls	r2, r2, #1
 8001774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001776:	2327      	movs	r3, #39	@ 0x27
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4013      	ands	r3, r2
 8001786:	d00c      	beq.n	80017a2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	2208      	movs	r2, #8
 800178c:	4313      	orrs	r3, r2
 800178e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	00d2      	lsls	r2, r2, #3
 8001798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800179a:	2327      	movs	r3, #39	@ 0x27
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d00c      	beq.n	80017c6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	2202      	movs	r2, #2
 80017b0:	4313      	orrs	r3, r2
 80017b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2280      	movs	r2, #128	@ 0x80
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017be:	2327      	movs	r3, #39	@ 0x27
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80017c6:	2327      	movs	r3, #39	@ 0x27
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01d      	beq.n	800180c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff fe28 	bl	8001428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	490e      	ldr	r1, [pc, #56]	@ (800181c <I2C_IsErrorOccurred+0x1ec>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2241      	movs	r2, #65	@ 0x41
 80017f8:	2120      	movs	r1, #32
 80017fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2242      	movs	r2, #66	@ 0x42
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800180c:	2327      	movs	r3, #39	@ 0x27
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	781b      	ldrb	r3, [r3, #0]
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b00a      	add	sp, #40	@ 0x28
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	fe00e800 	.word	0xfe00e800

08001820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	0008      	movs	r0, r1
 800182a:	0011      	movs	r1, r2
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	240a      	movs	r4, #10
 8001830:	193b      	adds	r3, r7, r4
 8001832:	1c02      	adds	r2, r0, #0
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	2009      	movs	r0, #9
 8001838:	183b      	adds	r3, r7, r0
 800183a:	1c0a      	adds	r2, r1, #0
 800183c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800183e:	193b      	adds	r3, r7, r4
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	059b      	lsls	r3, r3, #22
 8001844:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001846:	183b      	adds	r3, r7, r0
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	0419      	lsls	r1, r3, #16
 800184c:	23ff      	movs	r3, #255	@ 0xff
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001852:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185a:	4313      	orrs	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800186a:	0d51      	lsrs	r1, r2, #21
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	00d2      	lsls	r2, r2, #3
 8001870:	400a      	ands	r2, r1
 8001872:	4907      	ldr	r1, [pc, #28]	@ (8001890 <I2C_TransferConfig+0x70>)
 8001874:	430a      	orrs	r2, r1
 8001876:	43d2      	mvns	r2, r2
 8001878:	401a      	ands	r2, r3
 800187a:	0011      	movs	r1, r2
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b007      	add	sp, #28
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	03ff63ff 	.word	0x03ff63ff

08001894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2241      	movs	r2, #65	@ 0x41
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d138      	bne.n	800191c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2240      	movs	r2, #64	@ 0x40
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e032      	b.n	800191e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2240      	movs	r2, #64	@ 0x40
 80018bc:	2101      	movs	r1, #1
 80018be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2241      	movs	r2, #65	@ 0x41
 80018c4:	2124      	movs	r1, #36	@ 0x24
 80018c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4911      	ldr	r1, [pc, #68]	@ (8001928 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2241      	movs	r2, #65	@ 0x41
 800190c:	2120      	movs	r1, #32
 800190e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2240      	movs	r2, #64	@ 0x40
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800191c:	2302      	movs	r3, #2
  }
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	ffffefff 	.word	0xffffefff

0800192c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2241      	movs	r2, #65	@ 0x41
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b20      	cmp	r3, #32
 8001940:	d139      	bne.n	80019b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2240      	movs	r2, #64	@ 0x40
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800194c:	2302      	movs	r3, #2
 800194e:	e033      	b.n	80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2241      	movs	r2, #65	@ 0x41
 800195c:	2124      	movs	r1, #36	@ 0x24
 800195e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2241      	movs	r2, #65	@ 0x41
 80019a6:	2120      	movs	r1, #32
 80019a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2240      	movs	r2, #64	@ 0x40
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
  }
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fffff0ff 	.word	0xfffff0ff

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 fbaf 	bl	8002136 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d8:	4bcf      	ldr	r3, [pc, #828]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	220c      	movs	r2, #12
 80019de:	4013      	ands	r3, r2
 80019e0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e2:	4bcd      	ldr	r3, [pc, #820]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4013      	ands	r3, r2
 80019ec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	d100      	bne.n	80019fa <HAL_RCC_OscConfig+0x36>
 80019f8:	e07e      	b.n	8001af8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d007      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d112      	bne.n	8001a2c <HAL_RCC_OscConfig+0x68>
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d10d      	bne.n	8001a2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	4bc1      	ldr	r3, [pc, #772]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	029b      	lsls	r3, r3, #10
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d100      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5a>
 8001a1c:	e06b      	b.n	8001af6 <HAL_RCC_OscConfig+0x132>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d167      	bne.n	8001af6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f000 fb85 	bl	8002136 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	025b      	lsls	r3, r3, #9
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_OscConfig+0x84>
 8001a38:	4bb7      	ldr	r3, [pc, #732]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4bb6      	ldr	r3, [pc, #728]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	0249      	lsls	r1, r1, #9
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e027      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	23a0      	movs	r3, #160	@ 0xa0
 8001a4e:	02db      	lsls	r3, r3, #11
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10e      	bne.n	8001a72 <HAL_RCC_OscConfig+0xae>
 8001a54:	4bb0      	ldr	r3, [pc, #704]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4baf      	ldr	r3, [pc, #700]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a5a:	2180      	movs	r1, #128	@ 0x80
 8001a5c:	02c9      	lsls	r1, r1, #11
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4bad      	ldr	r3, [pc, #692]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4bac      	ldr	r3, [pc, #688]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a68:	2180      	movs	r1, #128	@ 0x80
 8001a6a:	0249      	lsls	r1, r1, #9
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e012      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a72:	4ba9      	ldr	r3, [pc, #676]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4ba8      	ldr	r3, [pc, #672]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a78:	49a8      	ldr	r1, [pc, #672]	@ (8001d1c <HAL_RCC_OscConfig+0x358>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4ba6      	ldr	r3, [pc, #664]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4ba2      	ldr	r3, [pc, #648]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4ba1      	ldr	r3, [pc, #644]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001a92:	49a3      	ldr	r1, [pc, #652]	@ (8001d20 <HAL_RCC_OscConfig+0x35c>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f87c 	bl	8000b9c <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f877 	bl	8000b9c <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	@ 0x64
 8001ab6:	d902      	bls.n	8001abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f000 fb3c 	bl	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001abe:	4b96      	ldr	r3, [pc, #600]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	029b      	lsls	r3, r3, #10
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0ef      	beq.n	8001aaa <HAL_RCC_OscConfig+0xe6>
 8001aca:	e015      	b.n	8001af8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff f866 	bl	8000b9c <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad6:	f7ff f861 	bl	8000b9c <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	@ 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e326      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	4013      	ands	r3, r2
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x112>
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d100      	bne.n	8001b04 <HAL_RCC_OscConfig+0x140>
 8001b02:	e08b      	b.n	8001c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d13e      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1d0>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_RCC_OscConfig+0x16c>
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e302      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b79      	ldr	r3, [pc, #484]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a7b      	ldr	r2, [pc, #492]	@ (8001d24 <HAL_RCC_OscConfig+0x360>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	021a      	lsls	r2, r3, #8
 8001b40:	4b75      	ldr	r3, [pc, #468]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b46:	4b74      	ldr	r3, [pc, #464]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2209      	movs	r2, #9
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	4b71      	ldr	r3, [pc, #452]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b58:	f000 fc40 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8001b5c:	0001      	movs	r1, r0
 8001b5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	220f      	movs	r2, #15
 8001b66:	4013      	ands	r3, r2
 8001b68:	4a6f      	ldr	r2, [pc, #444]	@ (8001d28 <HAL_RCC_OscConfig+0x364>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	40da      	lsrs	r2, r3
 8001b70:	4b6e      	ldr	r3, [pc, #440]	@ (8001d2c <HAL_RCC_OscConfig+0x368>)
 8001b72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b74:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <HAL_RCC_OscConfig+0x36c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2513      	movs	r5, #19
 8001b7a:	197c      	adds	r4, r7, r5
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7fe ffc7 	bl	8000b10 <HAL_InitTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b86:	197b      	adds	r3, r7, r5
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d046      	beq.n	8001c1c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001b8e:	197b      	adds	r3, r7, r5
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	e2d0      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d027      	beq.n	8001bea <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2209      	movs	r2, #9
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fff6 	bl	8000b9c <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7fe fff1 	bl	8000b9c <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e2b6      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc8:	4b53      	ldr	r3, [pc, #332]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0f1      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b51      	ldr	r3, [pc, #324]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a53      	ldr	r2, [pc, #332]	@ (8001d24 <HAL_RCC_OscConfig+0x360>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	021a      	lsls	r2, r3, #8
 8001be2:	4b4d      	ldr	r3, [pc, #308]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	e018      	b.n	8001c1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe ffd1 	bl	8000b9c <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c00:	f7fe ffcc 	bl	8000b9c <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e291      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c12:	4b41      	ldr	r3, [pc, #260]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d1f1      	bne.n	8001c00 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	4013      	ands	r3, r2
 8001c24:	d100      	bne.n	8001c28 <HAL_RCC_OscConfig+0x264>
 8001c26:	e0a1      	b.n	8001d6c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d140      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x282>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e277      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c46:	4b34      	ldr	r3, [pc, #208]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <HAL_RCC_OscConfig+0x370>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c54:	4b30      	ldr	r3, [pc, #192]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	0a19      	lsrs	r1, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	061a      	lsls	r2, r3, #24
 8001c68:	4b2b      	ldr	r3, [pc, #172]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	0b5b      	lsrs	r3, r3, #13
 8001c74:	3301      	adds	r3, #1
 8001c76:	2280      	movs	r2, #128	@ 0x80
 8001c78:	0212      	lsls	r2, r2, #8
 8001c7a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	210f      	movs	r1, #15
 8001c84:	400b      	ands	r3, r1
 8001c86:	4928      	ldr	r1, [pc, #160]	@ (8001d28 <HAL_RCC_OscConfig+0x364>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_RCC_OscConfig+0x368>)
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <HAL_RCC_OscConfig+0x36c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2513      	movs	r5, #19
 8001c96:	197c      	adds	r4, r7, r5
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe ff39 	bl	8000b10 <HAL_InitTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d060      	beq.n	8001d6c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001caa:	197b      	adds	r3, r7, r5
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	e242      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d03f      	beq.n	8001d38 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001cbe:	2180      	movs	r1, #128	@ 0x80
 8001cc0:	0049      	lsls	r1, r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ff69 	bl	8000b9c <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd0:	f7fe ff64 	bl	8000b9c <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e229      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_RCC_OscConfig+0x370>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	0a19      	lsrs	r1, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	061a      	lsls	r2, r3, #24
 8001d10:	4b01      	ldr	r3, [pc, #4]	@ (8001d18 <HAL_RCC_OscConfig+0x354>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e029      	b.n	8001d6c <HAL_RCC_OscConfig+0x3a8>
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	fffeffff 	.word	0xfffeffff
 8001d20:	fffbffff 	.word	0xfffbffff
 8001d24:	ffffe0ff 	.word	0xffffe0ff
 8001d28:	08002874 	.word	0x08002874
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004
 8001d34:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d38:	4bbd      	ldr	r3, [pc, #756]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4bbc      	ldr	r3, [pc, #752]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001d3e:	49bd      	ldr	r1, [pc, #756]	@ (8002034 <HAL_RCC_OscConfig+0x670>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff2a 	bl	8000b9c <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4e:	f7fe ff25 	bl	8000b9c <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1ea      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d60:	4bb3      	ldr	r3, [pc, #716]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2208      	movs	r2, #8
 8001d72:	4013      	ands	r3, r2
 8001d74:	d036      	beq.n	8001de4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4bac      	ldr	r3, [pc, #688]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001d80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d82:	4bab      	ldr	r3, [pc, #684]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe ff07 	bl	8000b9c <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d94:	f7fe ff02 	bl	8000b9c <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1c7      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001da6:	4ba2      	ldr	r3, [pc, #648]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0f1      	beq.n	8001d94 <HAL_RCC_OscConfig+0x3d0>
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	4b9f      	ldr	r3, [pc, #636]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001db6:	4b9e      	ldr	r3, [pc, #632]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	438a      	bics	r2, r1
 8001dbc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe feed 	bl	8000b9c <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fee8 	bl	8000b9c <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1ad      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dda:	4b95      	ldr	r3, [pc, #596]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1f1      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2204      	movs	r2, #4
 8001dea:	4013      	ands	r3, r2
 8001dec:	d100      	bne.n	8001df0 <HAL_RCC_OscConfig+0x42c>
 8001dee:	e0ae      	b.n	8001f4e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df0:	2027      	movs	r0, #39	@ 0x27
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	4b8d      	ldr	r3, [pc, #564]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	4013      	ands	r3, r2
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b8a      	ldr	r3, [pc, #552]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e08:	4b89      	ldr	r3, [pc, #548]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	0549      	lsls	r1, r1, #21
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b87      	ldr	r3, [pc, #540]	@ (8002038 <HAL_RCC_OscConfig+0x674>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d11a      	bne.n	8001e5a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e24:	4b84      	ldr	r3, [pc, #528]	@ (8002038 <HAL_RCC_OscConfig+0x674>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b83      	ldr	r3, [pc, #524]	@ (8002038 <HAL_RCC_OscConfig+0x674>)
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	0049      	lsls	r1, r1, #1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7fe feb3 	bl	8000b9c <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3c:	f7fe feae 	bl	8000b9c <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e173      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002038 <HAL_RCC_OscConfig+0x674>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	@ 0x80
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
 8001e66:	4b72      	ldr	r3, [pc, #456]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e6a:	4b71      	ldr	r3, [pc, #452]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e6c:	2180      	movs	r1, #128	@ 0x80
 8001e6e:	0049      	lsls	r1, r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e74:	e031      	b.n	8001eda <HAL_RCC_OscConfig+0x516>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4d4>
 8001e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e82:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e84:	496b      	ldr	r1, [pc, #428]	@ (8002034 <HAL_RCC_OscConfig+0x670>)
 8001e86:	400a      	ands	r2, r1
 8001e88:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e8a:	4b69      	ldr	r3, [pc, #420]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e8e:	4b68      	ldr	r3, [pc, #416]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001e90:	496a      	ldr	r1, [pc, #424]	@ (800203c <HAL_RCC_OscConfig+0x678>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e96:	e020      	b.n	8001eda <HAL_RCC_OscConfig+0x516>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	23a0      	movs	r3, #160	@ 0xa0
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4fe>
 8001ea4:	4b62      	ldr	r3, [pc, #392]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001ea6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ea8:	4b61      	ldr	r3, [pc, #388]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	00c9      	lsls	r1, r1, #3
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	0049      	lsls	r1, r1, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x516>
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001ec8:	495a      	ldr	r1, [pc, #360]	@ (8002034 <HAL_RCC_OscConfig+0x670>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ece:	4b58      	ldr	r3, [pc, #352]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ed2:	4b57      	ldr	r3, [pc, #348]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001ed4:	4959      	ldr	r1, [pc, #356]	@ (800203c <HAL_RCC_OscConfig+0x678>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d015      	beq.n	8001f0e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fe5b 	bl	8000b9c <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe fe56 	bl	8000b9c <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a52      	ldr	r2, [pc, #328]	@ (8002040 <HAL_RCC_OscConfig+0x67c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e11a      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f00:	4b4b      	ldr	r3, [pc, #300]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x528>
 8001f0c:	e014      	b.n	8001f38 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fe45 	bl	8000b9c <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f16:	e009      	b.n	8001f2c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7fe fe40 	bl	8000b9c <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	4a47      	ldr	r2, [pc, #284]	@ (8002040 <HAL_RCC_OscConfig+0x67c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e104      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f2c:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d1ef      	bne.n	8001f18 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f38:	2327      	movs	r3, #39	@ 0x27
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f46:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f48:	493e      	ldr	r1, [pc, #248]	@ (8002044 <HAL_RCC_OscConfig+0x680>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2220      	movs	r2, #32
 8001f54:	4013      	ands	r3, r2
 8001f56:	d049      	beq.n	8001fec <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d026      	beq.n	8001fae <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f66:	2101      	movs	r1, #1
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f70:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f78:	4b33      	ldr	r3, [pc, #204]	@ (8002048 <HAL_RCC_OscConfig+0x684>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <HAL_RCC_OscConfig+0x684>)
 8001f7e:	2180      	movs	r1, #128	@ 0x80
 8001f80:	0189      	lsls	r1, r1, #6
 8001f82:	430a      	orrs	r2, r1
 8001f84:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fe09 	bl	8000b9c <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f90:	f7fe fe04 	bl	8000b9c <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0c9      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fa2:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f1      	beq.n	8001f90 <HAL_RCC_OscConfig+0x5cc>
 8001fac:	e01e      	b.n	8001fec <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001fae:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	438a      	bics	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_RCC_OscConfig+0x684>)
 8001fbc:	6a1a      	ldr	r2, [r3, #32]
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <HAL_RCC_OscConfig+0x684>)
 8001fc0:	4922      	ldr	r1, [pc, #136]	@ (800204c <HAL_RCC_OscConfig+0x688>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fde9 	bl	8000b9c <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fd0:	f7fe fde4 	bl	8000b9c <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0a9      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d1f1      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x632>
 8001ff4:	e09e      	b.n	8002134 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d100      	bne.n	8001ffe <HAL_RCC_OscConfig+0x63a>
 8001ffc:	e077      	b.n	80020ee <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	2b02      	cmp	r3, #2
 8002004:	d158      	bne.n	80020b8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_OscConfig+0x66c>)
 800200c:	4910      	ldr	r1, [pc, #64]	@ (8002050 <HAL_RCC_OscConfig+0x68c>)
 800200e:	400a      	ands	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe fdc3 	bl	8000b9c <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe fdbe 	bl	8000b9c <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d914      	bls.n	8002054 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e083      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	40021000 	.word	0x40021000
 8002034:	fffffeff 	.word	0xfffffeff
 8002038:	40007000 	.word	0x40007000
 800203c:	fffffbff 	.word	0xfffffbff
 8002040:	00001388 	.word	0x00001388
 8002044:	efffffff 	.word	0xefffffff
 8002048:	40010000 	.word	0x40010000
 800204c:	ffffdfff 	.word	0xffffdfff
 8002050:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002054:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	049b      	lsls	r3, r3, #18
 800205c:	4013      	ands	r3, r2
 800205e:	d1dd      	bne.n	800201c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a37      	ldr	r2, [pc, #220]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002078:	431a      	orrs	r2, r3
 800207a:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002080:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	0449      	lsls	r1, r1, #17
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fd85 	bl	8000b9c <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fd80 	bl	8000b9c <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e045      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020aa:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	049b      	lsls	r3, r3, #18
 80020b2:	4013      	ands	r3, r2
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x6d4>
 80020b6:	e03d      	b.n	8002134 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020be:	4922      	ldr	r1, [pc, #136]	@ (8002148 <HAL_RCC_OscConfig+0x784>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe fd6a 	bl	8000b9c <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fd65 	bl	8000b9c <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e02a      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020e0:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x70a>
 80020ec:	e022      	b.n	8002134 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e01d      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	401a      	ands	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	429a      	cmp	r2, r3
 800210e:	d10f      	bne.n	8002130 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	23f0      	movs	r3, #240	@ 0xf0
 8002114:	039b      	lsls	r3, r3, #14
 8002116:	401a      	ands	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	23c0      	movs	r3, #192	@ 0xc0
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	401a      	ands	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b00a      	add	sp, #40	@ 0x28
 800213c:	bdb0      	pop	{r4, r5, r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	40021000 	.word	0x40021000
 8002144:	ff02ffff 	.word	0xff02ffff
 8002148:	feffffff 	.word	0xfeffffff

0800214c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e128      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b96      	ldr	r3, [pc, #600]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d91e      	bls.n	80021ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b93      	ldr	r3, [pc, #588]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2201      	movs	r2, #1
 8002174:	4393      	bics	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	4b90      	ldr	r3, [pc, #576]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002180:	f7fe fd0c 	bl	8000b9c <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002188:	e009      	b.n	800219e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe fd07 	bl	8000b9c <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a8a      	ldr	r2, [pc, #552]	@ (80023c0 <HAL_RCC_ClockConfig+0x274>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e109      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b87      	ldr	r3, [pc, #540]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b6:	4b83      	ldr	r3, [pc, #524]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	22f0      	movs	r2, #240	@ 0xf0
 80021bc:	4393      	bics	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b7f      	ldr	r3, [pc, #508]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x8a>
 80021d4:	e089      	b.n	80022ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021de:	4b79      	ldr	r3, [pc, #484]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	4013      	ands	r3, r2
 80021e8:	d120      	bne.n	800222c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0e1      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021f6:	4b73      	ldr	r3, [pc, #460]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	049b      	lsls	r3, r3, #18
 80021fe:	4013      	ands	r3, r2
 8002200:	d114      	bne.n	800222c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0d5      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d106      	bne.n	800221c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800220e:	4b6d      	ldr	r3, [pc, #436]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2204      	movs	r2, #4
 8002214:	4013      	ands	r3, r2
 8002216:	d109      	bne.n	800222c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0ca      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800221c:	4b69      	ldr	r3, [pc, #420]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0c2      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222c:	4b65      	ldr	r3, [pc, #404]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2203      	movs	r2, #3
 8002232:	4393      	bics	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4b62      	ldr	r3, [pc, #392]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7fe fcac 	bl	8000b9c <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d111      	bne.n	8002274 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002250:	e009      	b.n	8002266 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002252:	f7fe fca3 	bl	8000b9c <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4a58      	ldr	r2, [pc, #352]	@ (80023c0 <HAL_RCC_ClockConfig+0x274>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0a5      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002266:	4b57      	ldr	r3, [pc, #348]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	220c      	movs	r2, #12
 800226c:	4013      	ands	r3, r2
 800226e:	2b08      	cmp	r3, #8
 8002270:	d1ef      	bne.n	8002252 <HAL_RCC_ClockConfig+0x106>
 8002272:	e03a      	b.n	80022ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227c:	e009      	b.n	8002292 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227e:	f7fe fc8d 	bl	8000b9c <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4a4d      	ldr	r2, [pc, #308]	@ (80023c0 <HAL_RCC_ClockConfig+0x274>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e08f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002292:	4b4c      	ldr	r3, [pc, #304]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	220c      	movs	r2, #12
 8002298:	4013      	ands	r3, r2
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d1ef      	bne.n	800227e <HAL_RCC_ClockConfig+0x132>
 800229e:	e024      	b.n	80022ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d11b      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a8:	e009      	b.n	80022be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe fc77 	bl	8000b9c <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a42      	ldr	r2, [pc, #264]	@ (80023c0 <HAL_RCC_ClockConfig+0x274>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e079      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	220c      	movs	r2, #12
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d1ef      	bne.n	80022aa <HAL_RCC_ClockConfig+0x15e>
 80022ca:	e00e      	b.n	80022ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fc66 	bl	8000b9c <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4a3a      	ldr	r2, [pc, #232]	@ (80023c0 <HAL_RCC_ClockConfig+0x274>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e068      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022e0:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	220c      	movs	r2, #12
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ea:	4b34      	ldr	r3, [pc, #208]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d21e      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f8:	4b30      	ldr	r3, [pc, #192]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4393      	bics	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800230a:	f7fe fc47 	bl	8000b9c <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	e009      	b.n	8002328 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fc42 	bl	8000b9c <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	4a28      	ldr	r2, [pc, #160]	@ (80023c0 <HAL_RCC_ClockConfig+0x274>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e044      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002328:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <HAL_RCC_ClockConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d1ee      	bne.n	8002314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2204      	movs	r2, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <HAL_RCC_ClockConfig+0x27c>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2208      	movs	r2, #8
 800235a:	4013      	ands	r3, r2
 800235c:	d00a      	beq.n	8002374 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_RCC_ClockConfig+0x280>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	00da      	lsls	r2, r3, #3
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002374:	f000 f832 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002378:	0001      	movs	r1, r0
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_RCC_ClockConfig+0x278>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	220f      	movs	r2, #15
 8002382:	4013      	ands	r3, r2
 8002384:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <HAL_RCC_ClockConfig+0x284>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	000a      	movs	r2, r1
 800238a:	40da      	lsrs	r2, r3
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_ClockConfig+0x288>)
 800238e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_ClockConfig+0x28c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	250b      	movs	r5, #11
 8002396:	197c      	adds	r4, r7, r5
 8002398:	0018      	movs	r0, r3
 800239a:	f7fe fbb9 	bl	8000b10 <HAL_InitTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	40022000 	.word	0x40022000
 80023c0:	00001388 	.word	0x00001388
 80023c4:	40021000 	.word	0x40021000
 80023c8:	fffff8ff 	.word	0xfffff8ff
 80023cc:	ffffc7ff 	.word	0xffffc7ff
 80023d0:	08002874 	.word	0x08002874
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023e2:	4b3c      	ldr	r3, [pc, #240]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	220c      	movs	r2, #12
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d013      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x3e>
 80023f2:	d85c      	bhi.n	80024ae <HAL_RCC_GetSysClockFreq+0xd2>
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d002      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x22>
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d00b      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x38>
 80023fc:	e057      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023fe:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2210      	movs	r2, #16
 8002404:	4013      	ands	r3, r2
 8002406:	d002      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002408:	4b33      	ldr	r3, [pc, #204]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800240a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800240c:	e05d      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800240e:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x100>)
 8002410:	613b      	str	r3, [r7, #16]
      break;
 8002412:	e05a      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002414:	4b32      	ldr	r3, [pc, #200]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002416:	613b      	str	r3, [r7, #16]
      break;
 8002418:	e057      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	0c9b      	lsrs	r3, r3, #18
 800241e:	220f      	movs	r2, #15
 8002420:	4013      	ands	r3, r2
 8002422:	4a30      	ldr	r2, [pc, #192]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	0d9b      	lsrs	r3, r3, #22
 800242c:	2203      	movs	r2, #3
 800242e:	4013      	ands	r3, r2
 8002430:	3301      	adds	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002434:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	4013      	ands	r3, r2
 800243e:	d00f      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	000a      	movs	r2, r1
 8002444:	0152      	lsls	r2, r2, #5
 8002446:	1a52      	subs	r2, r2, r1
 8002448:	0193      	lsls	r3, r2, #6
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	185b      	adds	r3, r3, r1
 8002450:	025b      	lsls	r3, r3, #9
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7fd fe57 	bl	8000108 <__udivsi3>
 800245a:	0003      	movs	r3, r0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e023      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002460:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2210      	movs	r2, #16
 8002466:	4013      	ands	r3, r2
 8002468:	d00f      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	000a      	movs	r2, r1
 800246e:	0152      	lsls	r2, r2, #5
 8002470:	1a52      	subs	r2, r2, r1
 8002472:	0193      	lsls	r3, r2, #6
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	185b      	adds	r3, r3, r1
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f7fd fe42 	bl	8000108 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00e      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	000a      	movs	r2, r1
 800248e:	0152      	lsls	r2, r2, #5
 8002490:	1a52      	subs	r2, r2, r1
 8002492:	0193      	lsls	r3, r2, #6
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	185b      	adds	r3, r3, r1
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	0018      	movs	r0, r3
 80024a0:	f7fd fe32 	bl	8000108 <__udivsi3>
 80024a4:	0003      	movs	r3, r0
 80024a6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
      break;
 80024ac:	e00d      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0b5b      	lsrs	r3, r3, #13
 80024b4:	2207      	movs	r2, #7
 80024b6:	4013      	ands	r3, r2
 80024b8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	2280      	movs	r2, #128	@ 0x80
 80024c0:	0212      	lsls	r2, r2, #8
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024ca:	693b      	ldr	r3, [r7, #16]
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b006      	add	sp, #24
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	003d0900 	.word	0x003d0900
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	08002884 	.word	0x08002884

080024e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80024f0:	2317      	movs	r3, #23
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2220      	movs	r2, #32
 80024fe:	4013      	ands	r3, r2
 8002500:	d106      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800250e:	e104      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002510:	4bb1      	ldr	r3, [pc, #708]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	055b      	lsls	r3, r3, #21
 8002518:	4013      	ands	r3, r2
 800251a:	d10a      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4bae      	ldr	r3, [pc, #696]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800251e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002520:	4bad      	ldr	r3, [pc, #692]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002522:	2180      	movs	r1, #128	@ 0x80
 8002524:	0549      	lsls	r1, r1, #21
 8002526:	430a      	orrs	r2, r1
 8002528:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800252a:	2317      	movs	r3, #23
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4baa      	ldr	r3, [pc, #680]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4013      	ands	r3, r2
 800253c:	d11a      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4ba7      	ldr	r3, [pc, #668]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4ba6      	ldr	r3, [pc, #664]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	0049      	lsls	r1, r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254c:	f7fe fb26 	bl	8000b9c <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7fe fb21 	bl	8000b9c <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	@ 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e133      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b9c      	ldr	r3, [pc, #624]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4013      	ands	r3, r2
 8002572:	d0f0      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002574:	4b98      	ldr	r3, [pc, #608]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	23c0      	movs	r3, #192	@ 0xc0
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	23c0      	movs	r3, #192	@ 0xc0
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	4013      	ands	r3, r2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	23c0      	movs	r3, #192	@ 0xc0
 8002596:	039b      	lsls	r3, r3, #14
 8002598:	4013      	ands	r3, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d013      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	23c0      	movs	r3, #192	@ 0xc0
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	401a      	ands	r2, r3
 80025aa:	23c0      	movs	r3, #192	@ 0xc0
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10a      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025b2:	4b89      	ldr	r3, [pc, #548]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d101      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e103      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80025c8:	4b83      	ldr	r3, [pc, #524]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025cc:	23c0      	movs	r3, #192	@ 0xc0
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d049      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	23c0      	movs	r3, #192	@ 0xc0
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d004      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	4013      	ands	r3, r2
 80025f2:	d10d      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	23c0      	movs	r3, #192	@ 0xc0
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	4013      	ands	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d034      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d02e      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002610:	4b71      	ldr	r3, [pc, #452]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002614:	4a72      	ldr	r2, [pc, #456]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002616:	4013      	ands	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261a:	4b6f      	ldr	r3, [pc, #444]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800261e:	4b6e      	ldr	r3, [pc, #440]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	0309      	lsls	r1, r1, #12
 8002624:	430a      	orrs	r2, r1
 8002626:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002628:	4b6b      	ldr	r3, [pc, #428]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800262a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262c:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800262e:	496d      	ldr	r1, [pc, #436]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002630:	400a      	ands	r2, r1
 8002632:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002634:	4b68      	ldr	r3, [pc, #416]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d014      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe faaa 	bl	8000b9c <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800264c:	e009      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe faa5 	bl	8000b9c <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a63      	ldr	r2, [pc, #396]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b6      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002662:	4b5d      	ldr	r3, [pc, #372]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4013      	ands	r3, r2
 800266c:	d0ef      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4013      	ands	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	23c0      	movs	r3, #192	@ 0xc0
 8002680:	029b      	lsls	r3, r3, #10
 8002682:	401a      	ands	r2, r3
 8002684:	23c0      	movs	r3, #192	@ 0xc0
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	429a      	cmp	r2, r3
 800268a:	d10c      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800268c:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a56      	ldr	r2, [pc, #344]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	23c0      	movs	r3, #192	@ 0xc0
 800269c:	039b      	lsls	r3, r3, #14
 800269e:	401a      	ands	r2, r3
 80026a0:	4b4d      	ldr	r3, [pc, #308]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b4c      	ldr	r3, [pc, #304]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	23c0      	movs	r3, #192	@ 0xc0
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	401a      	ands	r2, r3
 80026b4:	4b48      	ldr	r3, [pc, #288]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b6:	430a      	orrs	r2, r1
 80026b8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2220      	movs	r2, #32
 80026c0:	4013      	ands	r3, r2
 80026c2:	d01f      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	23c0      	movs	r3, #192	@ 0xc0
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	401a      	ands	r2, r3
 80026ce:	23c0      	movs	r3, #192	@ 0xc0
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80026d6:	4b40      	ldr	r3, [pc, #256]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a44      	ldr	r2, [pc, #272]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026dc:	4013      	ands	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	23c0      	movs	r3, #192	@ 0xc0
 80026e6:	039b      	lsls	r3, r3, #14
 80026e8:	401a      	ands	r2, r3
 80026ea:	4b3b      	ldr	r3, [pc, #236]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b39      	ldr	r3, [pc, #228]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	23c0      	movs	r3, #192	@ 0xc0
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	401a      	ands	r2, r3
 80026fe:	4b36      	ldr	r3, [pc, #216]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002700:	430a      	orrs	r2, r1
 8002702:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002704:	2317      	movs	r3, #23
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002712:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002714:	4936      	ldr	r1, [pc, #216]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002716:	400a      	ands	r2, r1
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002724:	4b2c      	ldr	r3, [pc, #176]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002728:	2203      	movs	r2, #3
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002734:	430a      	orrs	r2, r1
 8002736:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002742:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	220c      	movs	r2, #12
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002752:	430a      	orrs	r2, r1
 8002754:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2204      	movs	r2, #4
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002764:	4a23      	ldr	r2, [pc, #140]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002770:	430a      	orrs	r2, r1
 8002772:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2208      	movs	r2, #8
 800277a:	4013      	ands	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277e:	4b16      	ldr	r3, [pc, #88]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278e:	430a      	orrs	r2, r1
 8002790:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2240      	movs	r2, #64	@ 0x40
 8002798:	4013      	ands	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279c:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800279e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a0:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2280      	movs	r2, #128	@ 0x80
 80027b6:	4013      	ands	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80027ba:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b006      	add	sp, #24
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40007000 	.word	0x40007000
 80027e0:	fffcffff 	.word	0xfffcffff
 80027e4:	fff7ffff 	.word	0xfff7ffff
 80027e8:	00001388 	.word	0x00001388
 80027ec:	ffcfffff 	.word	0xffcfffff
 80027f0:	efffffff 	.word	0xefffffff
 80027f4:	fffff3ff 	.word	0xfffff3ff
 80027f8:	ffffcfff 	.word	0xffffcfff
 80027fc:	fbffffff 	.word	0xfbffffff
 8002800:	fff3ffff 	.word	0xfff3ffff

08002804 <memset>:
 8002804:	0003      	movs	r3, r0
 8002806:	1882      	adds	r2, r0, r2
 8002808:	4293      	cmp	r3, r2
 800280a:	d100      	bne.n	800280e <memset+0xa>
 800280c:	4770      	bx	lr
 800280e:	7019      	strb	r1, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	e7f9      	b.n	8002808 <memset+0x4>

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	2600      	movs	r6, #0
 8002818:	4c0c      	ldr	r4, [pc, #48]	@ (800284c <__libc_init_array+0x38>)
 800281a:	4d0d      	ldr	r5, [pc, #52]	@ (8002850 <__libc_init_array+0x3c>)
 800281c:	1b64      	subs	r4, r4, r5
 800281e:	10a4      	asrs	r4, r4, #2
 8002820:	42a6      	cmp	r6, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	2600      	movs	r6, #0
 8002826:	f000 f819 	bl	800285c <_init>
 800282a:	4c0a      	ldr	r4, [pc, #40]	@ (8002854 <__libc_init_array+0x40>)
 800282c:	4d0a      	ldr	r5, [pc, #40]	@ (8002858 <__libc_init_array+0x44>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	42a6      	cmp	r6, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	00b3      	lsls	r3, r6, #2
 800283a:	58eb      	ldr	r3, [r5, r3]
 800283c:	4798      	blx	r3
 800283e:	3601      	adds	r6, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	00b3      	lsls	r3, r6, #2
 8002844:	58eb      	ldr	r3, [r5, r3]
 8002846:	4798      	blx	r3
 8002848:	3601      	adds	r6, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	08002890 	.word	0x08002890
 8002850:	08002890 	.word	0x08002890
 8002854:	08002894 	.word	0x08002894
 8002858:	08002890 	.word	0x08002890

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
