
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001734  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080017f4  080017f4  000027f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001810  08001810  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001810  08001810  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001810  08001810  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001810  08001810  00002810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001814  08001814  00002814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001818  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001824  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001824  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035b8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ffd  00000000  00000000  000065ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  000075f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032e  00000000  00000000  00007a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123d0  00000000  00000000  00007d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ca6  00000000  00000000  0001a156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fc61  00000000  00000000  0001fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008fa5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd4  00000000  00000000  0008faa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00090874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017dc 	.word	0x080017dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080017dc 	.word	0x080017dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t tick_ms = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 f97f 	bl	800052c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f81d 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f899 	bl	8000368 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint16_t flag = 0;
 8000236:	1cbb      	adds	r3, r7, #2
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  tick_ms = HAL_GetTick();
 800023c:	f000 f9dc 	bl	80005f8 <HAL_GetTick>
 8000240:	0003      	movs	r3, r0
 8000242:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if (HAL_GetTick() - tick_ms > 500	){
 8000244:	f000 f9d8 	bl	80005f8 <HAL_GetTick>
 8000248:	0002      	movs	r2, r0
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	1ad2      	subs	r2, r2, r3
 800024e:	23fa      	movs	r3, #250	@ 0xfa
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	429a      	cmp	r2, r3
 8000254:	d9f6      	bls.n	8000244 <main+0x24>
		  //500 ms elapsed
		  tick_ms = HAL_GetTick();
 8000256:	f000 f9cf 	bl	80005f8 <HAL_GetTick>
 800025a:	0003      	movs	r3, r0
 800025c:	607b      	str	r3, [r7, #4]
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			  flag = 0;
		  }*/
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800025e:	23a0      	movs	r3, #160	@ 0xa0
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2120      	movs	r1, #32
 8000264:	0018      	movs	r0, r3
 8000266:	f000 fc18 	bl	8000a9a <HAL_GPIO_TogglePin>
	  if (HAL_GetTick() - tick_ms > 500	){
 800026a:	e7eb      	b.n	8000244 <main+0x24>

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b09b      	sub	sp, #108	@ 0x6c
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2430      	movs	r4, #48	@ 0x30
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2338      	movs	r3, #56	@ 0x38
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f001 fa81 	bl	8001784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	231c      	movs	r3, #28
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2314      	movs	r3, #20
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f001 fa79 	bl	8001784 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	0018      	movs	r0, r3
 8000296:	2318      	movs	r3, #24
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f001 fa72 	bl	8001784 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <SystemClock_Config+0xec>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2d      	ldr	r2, [pc, #180]	@ (800035c <SystemClock_Config+0xf0>)
 80002a6:	401a      	ands	r2, r3
 80002a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000358 <SystemClock_Config+0xec>)
 80002aa:	2180      	movs	r1, #128	@ 0x80
 80002ac:	0109      	lsls	r1, r1, #4
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2201      	movs	r2, #1
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	0252      	lsls	r2, r2, #9
 80002be:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2200      	movs	r2, #0
 80002c4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fc01 	bl	8000ad0 <HAL_RCC_OscConfig>
 80002ce:	1e03      	subs	r3, r0, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002d2:	f000 f8c9 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	211c      	movs	r1, #28
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	220f      	movs	r2, #15
 80002dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2202      	movs	r2, #2
 80002e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2100      	movs	r1, #0
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 ffac 	bl	8001258 <HAL_RCC_ClockConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000304:	f000 f8b0 	bl	8000468 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	04db      	lsls	r3, r3, #19
 800030c:	2200      	movs	r2, #0
 800030e:	0019      	movs	r1, r3
 8000310:	2001      	movs	r0, #1
 8000312:	f001 f8e9 	bl	80014e8 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <SystemClock_Config+0xf4>)
 8000318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800031a:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <SystemClock_Config+0xf4>)
 800031c:	2180      	movs	r1, #128	@ 0x80
 800031e:	0509      	lsls	r1, r1, #20
 8000320:	430a      	orrs	r2, r1
 8000322:	639a      	str	r2, [r3, #56]	@ 0x38

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_GPIO;
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <SystemClock_Config+0xf8>)
 800033a:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2222      	movs	r2, #34	@ 0x22
 8000340:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2220      	movs	r2, #32
 8000346:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f9d4 	bl	80016f8 <HAL_RCCEx_CRSConfig>
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b01b      	add	sp, #108	@ 0x6c
 8000356:	bd90      	pop	{r4, r7, pc}
 8000358:	40007000 	.word	0x40007000
 800035c:	ffffe7ff 	.word	0xffffe7ff
 8000360:	40021000 	.word	0x40021000
 8000364:	02dc6bff 	.word	0x02dc6bff

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b089      	sub	sp, #36	@ 0x24
 800036c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	240c      	movs	r4, #12
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	2314      	movs	r3, #20
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f001 fa03 	bl	8001784 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	4b39      	ldr	r3, [pc, #228]	@ (8000464 <MX_GPIO_Init+0xfc>)
 8000380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000382:	4b38      	ldr	r3, [pc, #224]	@ (8000464 <MX_GPIO_Init+0xfc>)
 8000384:	2104      	movs	r1, #4
 8000386:	430a      	orrs	r2, r1
 8000388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800038a:	4b36      	ldr	r3, [pc, #216]	@ (8000464 <MX_GPIO_Init+0xfc>)
 800038c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800038e:	2204      	movs	r2, #4
 8000390:	4013      	ands	r3, r2
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000396:	4b33      	ldr	r3, [pc, #204]	@ (8000464 <MX_GPIO_Init+0xfc>)
 8000398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800039a:	4b32      	ldr	r3, [pc, #200]	@ (8000464 <MX_GPIO_Init+0xfc>)
 800039c:	2180      	movs	r1, #128	@ 0x80
 800039e:	430a      	orrs	r2, r1
 80003a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003a2:	4b30      	ldr	r3, [pc, #192]	@ (8000464 <MX_GPIO_Init+0xfc>)
 80003a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003a6:	2280      	movs	r2, #128	@ 0x80
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <MX_GPIO_Init+0xfc>)
 80003b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <MX_GPIO_Init+0xfc>)
 80003b4:	2101      	movs	r1, #1
 80003b6:	430a      	orrs	r2, r1
 80003b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000464 <MX_GPIO_Init+0xfc>)
 80003bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003be:	2201      	movs	r2, #1
 80003c0:	4013      	ands	r3, r2
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003c6:	23a0      	movs	r3, #160	@ 0xa0
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2200      	movs	r2, #0
 80003cc:	2120      	movs	r1, #32
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fb46 	bl	8000a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2220      	movs	r2, #32
 80003d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	2201      	movs	r2, #1
 80003de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	193a      	adds	r2, r7, r4
 80003ee:	23a0      	movs	r3, #160	@ 0xa0
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 f9bd 	bl	8000774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003fa:	0021      	movs	r1, r4
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	0052      	lsls	r2, r2, #1
 8000402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000404:	000c      	movs	r4, r1
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2202      	movs	r2, #2
 800040a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_USB;
 8000418:	193b      	adds	r3, r7, r4
 800041a:	2202      	movs	r2, #2
 800041c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	193a      	adds	r2, r7, r4
 8000420:	23a0      	movs	r3, #160	@ 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	0011      	movs	r1, r2
 8000426:	0018      	movs	r0, r3
 8000428:	f000 f9a4 	bl	8000774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800042c:	0021      	movs	r1, r4
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2280      	movs	r2, #128	@ 0x80
 8000432:	0092      	lsls	r2, r2, #2
 8000434:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2202      	movs	r2, #2
 800043a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	187a      	adds	r2, r7, r1
 8000450:	23a0      	movs	r3, #160	@ 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f000 f98c 	bl	8000774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b009      	add	sp, #36	@ 0x24
 8000462:	bd90      	pop	{r4, r7, pc}
 8000464:	40021000 	.word	0x40021000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	46c0      	nop			@ (mov r8, r8)
 8000472:	e7fd      	b.n	8000470 <Error_Handler+0x8>

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <HAL_MspInit+0x24>)
 800047a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <HAL_MspInit+0x24>)
 800047e:	2101      	movs	r1, #1
 8000480:	430a      	orrs	r2, r1
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000484:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <HAL_MspInit+0x24>)
 8000486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_MspInit+0x24>)
 800048a:	2180      	movs	r1, #128	@ 0x80
 800048c:	0549      	lsls	r1, r1, #21
 800048e:	430a      	orrs	r2, r1
 8000490:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	e7fd      	b.n	80004a0 <NMI_Handler+0x4>

080004a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	e7fd      	b.n	80004a8 <HardFault_Handler+0x4>

080004ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f886 	bl	80005d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	46c0      	nop			@ (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Reset_Handler>:
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <LoopForever+0x2>)
 80004da:	4685      	mov	sp, r0
 80004dc:	f7ff fff7 	bl	80004ce <SystemInit>
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <LoopForever+0x6>)
 80004e2:	490d      	ldr	r1, [pc, #52]	@ (8000518 <LoopForever+0xa>)
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <LoopForever+0xe>)
 80004e6:	2300      	movs	r3, #0
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:
 80004ea:	58d4      	ldr	r4, [r2, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:
 80004f0:	18c4      	adds	r4, r0, r3
 80004f2:	428c      	cmp	r4, r1
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <LoopForever+0x12>)
 80004f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000524 <LoopForever+0x16>)
 80004fa:	2300      	movs	r3, #0
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:
 8000502:	42a2      	cmp	r2, r4
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>
 8000506:	f001 f945 	bl	8001794 <__libc_init_array>
 800050a:	f7ff fe89 	bl	8000220 <main>

0800050e <LoopForever>:
 800050e:	e7fe      	b.n	800050e <LoopForever>
 8000510:	20002000 	.word	0x20002000
 8000514:	20000000 	.word	0x20000000
 8000518:	2000000c 	.word	0x2000000c
 800051c:	08001818 	.word	0x08001818
 8000520:	2000000c 	.word	0x2000000c
 8000524:	2000002c 	.word	0x2000002c

08000528 <ADC1_COMP_IRQHandler>:
 8000528:	e7fe      	b.n	8000528 <ADC1_COMP_IRQHandler>
	...

0800052c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <HAL_Init+0x3c>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <HAL_Init+0x3c>)
 800053e:	2140      	movs	r1, #64	@ 0x40
 8000540:	430a      	orrs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f811 	bl	800056c <HAL_InitTick>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d003      	beq.n	8000556 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e001      	b.n	800055a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000556:	f7ff ff8d 	bl	8000474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	781b      	ldrb	r3, [r3, #0]
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <HAL_InitTick+0x5c>)
 8000576:	681c      	ldr	r4, [r3, #0]
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <HAL_InitTick+0x60>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0019      	movs	r1, r3
 800057e:	23fa      	movs	r3, #250	@ 0xfa
 8000580:	0098      	lsls	r0, r3, #2
 8000582:	f7ff fdc1 	bl	8000108 <__udivsi3>
 8000586:	0003      	movs	r3, r0
 8000588:	0019      	movs	r1, r3
 800058a:	0020      	movs	r0, r4
 800058c:	f7ff fdbc 	bl	8000108 <__udivsi3>
 8000590:	0003      	movs	r3, r0
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f8e1 	bl	800075a <HAL_SYSTICK_Config>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	e00f      	b.n	80005c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d80b      	bhi.n	80005be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	2301      	movs	r3, #1
 80005aa:	425b      	negs	r3, r3
 80005ac:	2200      	movs	r2, #0
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 f8be 	bl	8000730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_InitTick+0x64>)
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	0018      	movs	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b003      	add	sp, #12
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000004 	.word	0x20000004

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <HAL_IncTick+0x1c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	001a      	movs	r2, r3
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_IncTick+0x20>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	18d2      	adds	r2, r2, r3
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <HAL_IncTick+0x20>)
 80005e6:	601a      	str	r2, [r3, #0]
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000028 	.word	0x20000028

080005f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b02      	ldr	r3, [pc, #8]	@ (8000608 <HAL_GetTick+0x10>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	20000028 	.word	0x20000028

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	0002      	movs	r2, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000620:	d828      	bhi.n	8000674 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000622:	4a2f      	ldr	r2, [pc, #188]	@ (80006e0 <__NVIC_SetPriority+0xd4>)
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	089b      	lsrs	r3, r3, #2
 800062c:	33c0      	adds	r3, #192	@ 0xc0
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	589b      	ldr	r3, [r3, r2]
 8000632:	1dfa      	adds	r2, r7, #7
 8000634:	7812      	ldrb	r2, [r2, #0]
 8000636:	0011      	movs	r1, r2
 8000638:	2203      	movs	r2, #3
 800063a:	400a      	ands	r2, r1
 800063c:	00d2      	lsls	r2, r2, #3
 800063e:	21ff      	movs	r1, #255	@ 0xff
 8000640:	4091      	lsls	r1, r2
 8000642:	000a      	movs	r2, r1
 8000644:	43d2      	mvns	r2, r2
 8000646:	401a      	ands	r2, r3
 8000648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	22ff      	movs	r2, #255	@ 0xff
 8000650:	401a      	ands	r2, r3
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	0018      	movs	r0, r3
 8000658:	2303      	movs	r3, #3
 800065a:	4003      	ands	r3, r0
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000660:	481f      	ldr	r0, [pc, #124]	@ (80006e0 <__NVIC_SetPriority+0xd4>)
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b25b      	sxtb	r3, r3
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	33c0      	adds	r3, #192	@ 0xc0
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000672:	e031      	b.n	80006d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000674:	4a1b      	ldr	r2, [pc, #108]	@ (80006e4 <__NVIC_SetPriority+0xd8>)
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	0019      	movs	r1, r3
 800067c:	230f      	movs	r3, #15
 800067e:	400b      	ands	r3, r1
 8000680:	3b08      	subs	r3, #8
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	3306      	adds	r3, #6
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	3304      	adds	r3, #4
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1dfa      	adds	r2, r7, #7
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	0011      	movs	r1, r2
 8000694:	2203      	movs	r2, #3
 8000696:	400a      	ands	r2, r1
 8000698:	00d2      	lsls	r2, r2, #3
 800069a:	21ff      	movs	r1, #255	@ 0xff
 800069c:	4091      	lsls	r1, r2
 800069e:	000a      	movs	r2, r1
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	019b      	lsls	r3, r3, #6
 80006aa:	22ff      	movs	r2, #255	@ 0xff
 80006ac:	401a      	ands	r2, r3
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	0018      	movs	r0, r3
 80006b4:	2303      	movs	r3, #3
 80006b6:	4003      	ands	r3, r0
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <__NVIC_SetPriority+0xd8>)
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	001c      	movs	r4, r3
 80006c4:	230f      	movs	r3, #15
 80006c6:	4023      	ands	r3, r4
 80006c8:	3b08      	subs	r3, #8
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	430a      	orrs	r2, r1
 80006ce:	3306      	adds	r3, #6
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	18c3      	adds	r3, r0, r3
 80006d4:	3304      	adds	r3, #4
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b003      	add	sp, #12
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	045b      	lsls	r3, r3, #17
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d301      	bcc.n	8000700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fc:	2301      	movs	r3, #1
 80006fe:	e010      	b.n	8000722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <SysTick_Config+0x44>)
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	3a01      	subs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000708:	2301      	movs	r3, #1
 800070a:	425b      	negs	r3, r3
 800070c:	2103      	movs	r1, #3
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff ff7c 	bl	800060c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <SysTick_Config+0x44>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	4b04      	ldr	r3, [pc, #16]	@ (800072c <SysTick_Config+0x44>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000720:	2300      	movs	r3, #0
}
 8000722:	0018      	movs	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	210f      	movs	r1, #15
 800073c:	187b      	adds	r3, r7, r1
 800073e:	1c02      	adds	r2, r0, #0
 8000740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	187b      	adds	r3, r7, r1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b25b      	sxtb	r3, r3
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff ff5d 	bl	800060c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b004      	add	sp, #16
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff ffbf 	bl	80006e8 <SysTick_Config>
 800076a:	0003      	movs	r3, r0
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800078a:	e14f      	b.n	8000a2c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2101      	movs	r1, #1
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4091      	lsls	r1, r2
 8000796:	000a      	movs	r2, r1
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <HAL_GPIO_Init+0x30>
 80007a2:	e140      	b.n	8000a26 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2203      	movs	r2, #3
 80007aa:	4013      	ands	r3, r2
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d005      	beq.n	80007bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2203      	movs	r2, #3
 80007b6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d130      	bne.n	800081e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	2203      	movs	r2, #3
 80007c8:	409a      	lsls	r2, r3
 80007ca:	0013      	movs	r3, r2
 80007cc:	43da      	mvns	r2, r3
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	68da      	ldr	r2, [r3, #12]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	409a      	lsls	r2, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f2:	2201      	movs	r2, #1
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	409a      	lsls	r2, r3
 80007f8:	0013      	movs	r3, r2
 80007fa:	43da      	mvns	r2, r3
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4013      	ands	r3, r2
 8000800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	2201      	movs	r2, #1
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
 8000810:	0013      	movs	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4313      	orrs	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2203      	movs	r2, #3
 8000824:	4013      	ands	r3, r2
 8000826:	2b03      	cmp	r3, #3
 8000828:	d017      	beq.n	800085a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	2203      	movs	r2, #3
 8000836:	409a      	lsls	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	43da      	mvns	r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2203      	movs	r2, #3
 8000860:	4013      	ands	r3, r2
 8000862:	2b02      	cmp	r3, #2
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	0092      	lsls	r2, r2, #2
 8000870:	58d3      	ldr	r3, [r2, r3]
 8000872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	2207      	movs	r2, #7
 8000878:	4013      	ands	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	409a      	lsls	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	43da      	mvns	r2, r3
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2107      	movs	r1, #7
 8000892:	400b      	ands	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	409a      	lsls	r2, r3
 8000898:	0013      	movs	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4313      	orrs	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	0092      	lsls	r2, r2, #2
 80008aa:	6939      	ldr	r1, [r7, #16]
 80008ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	43da      	mvns	r2, r3
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2203      	movs	r2, #3
 80008cc:	401a      	ands	r2, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	409a      	lsls	r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	23c0      	movs	r3, #192	@ 0xc0
 80008e8:	029b      	lsls	r3, r3, #10
 80008ea:	4013      	ands	r3, r2
 80008ec:	d100      	bne.n	80008f0 <HAL_GPIO_Init+0x17c>
 80008ee:	e09a      	b.n	8000a26 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	4b54      	ldr	r3, [pc, #336]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80008f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008f4:	4b53      	ldr	r3, [pc, #332]	@ (8000a44 <HAL_GPIO_Init+0x2d0>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80008fc:	4a52      	ldr	r2, [pc, #328]	@ (8000a48 <HAL_GPIO_Init+0x2d4>)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	3302      	adds	r3, #2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	589b      	ldr	r3, [r3, r2]
 8000908:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	2203      	movs	r2, #3
 800090e:	4013      	ands	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	220f      	movs	r2, #15
 8000914:	409a      	lsls	r2, r3
 8000916:	0013      	movs	r3, r2
 8000918:	43da      	mvns	r2, r3
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	23a0      	movs	r3, #160	@ 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	429a      	cmp	r2, r3
 8000928:	d019      	beq.n	800095e <HAL_GPIO_Init+0x1ea>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <HAL_GPIO_Init+0x2d8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0x1e6>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a46      	ldr	r2, [pc, #280]	@ (8000a50 <HAL_GPIO_Init+0x2dc>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d00d      	beq.n	8000956 <HAL_GPIO_Init+0x1e2>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a45      	ldr	r2, [pc, #276]	@ (8000a54 <HAL_GPIO_Init+0x2e0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d007      	beq.n	8000952 <HAL_GPIO_Init+0x1de>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a44      	ldr	r2, [pc, #272]	@ (8000a58 <HAL_GPIO_Init+0x2e4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_GPIO_Init+0x1da>
 800094a:	2305      	movs	r3, #5
 800094c:	e008      	b.n	8000960 <HAL_GPIO_Init+0x1ec>
 800094e:	2306      	movs	r3, #6
 8000950:	e006      	b.n	8000960 <HAL_GPIO_Init+0x1ec>
 8000952:	2303      	movs	r3, #3
 8000954:	e004      	b.n	8000960 <HAL_GPIO_Init+0x1ec>
 8000956:	2302      	movs	r3, #2
 8000958:	e002      	b.n	8000960 <HAL_GPIO_Init+0x1ec>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <HAL_GPIO_Init+0x1ec>
 800095e:	2300      	movs	r3, #0
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	2103      	movs	r1, #3
 8000964:	400a      	ands	r2, r1
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	4093      	lsls	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000970:	4935      	ldr	r1, [pc, #212]	@ (8000a48 <HAL_GPIO_Init+0x2d4>)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	3302      	adds	r3, #2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	43da      	mvns	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	2380      	movs	r3, #128	@ 0x80
 8000994:	035b      	lsls	r3, r3, #13
 8000996:	4013      	ands	r3, r2
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009a8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	43da      	mvns	r2, r3
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	039b      	lsls	r3, r3, #14
 80009c0:	4013      	ands	r3, r2
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80009d2:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	029b      	lsls	r3, r3, #10
 80009ea:	4013      	ands	r3, r2
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009fc:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	025b      	lsls	r3, r3, #9
 8000a14:	4013      	ands	r3, r2
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	40da      	lsrs	r2, r3
 8000a34:	1e13      	subs	r3, r2, #0
 8000a36:	d000      	beq.n	8000a3a <HAL_GPIO_Init+0x2c6>
 8000a38:	e6a8      	b.n	800078c <HAL_GPIO_Init+0x18>
  }
}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b006      	add	sp, #24
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010000 	.word	0x40010000
 8000a4c:	50000400 	.word	0x50000400
 8000a50:	50000800 	.word	0x50000800
 8000a54:	50000c00 	.word	0x50000c00
 8000a58:	50001c00 	.word	0x50001c00
 8000a5c:	40010400 	.word	0x40010400

08000a60 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	0008      	movs	r0, r1
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	1cbb      	adds	r3, r7, #2
 8000a6e:	1c02      	adds	r2, r0, #0
 8000a70:	801a      	strh	r2, [r3, #0]
 8000a72:	1c7b      	adds	r3, r7, #1
 8000a74:	1c0a      	adds	r2, r1, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a78:	1c7b      	adds	r3, r7, #1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a80:	1cbb      	adds	r3, r7, #2
 8000a82:	881a      	ldrh	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000a88:	e003      	b.n	8000a92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000a8a:	1cbb      	adds	r3, r7, #2
 8000a8c:	881a      	ldrh	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	1cbb      	adds	r3, r7, #2
 8000aa6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aae:	1cbb      	adds	r3, r7, #2
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	041a      	lsls	r2, r3, #16
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	1cb9      	adds	r1, r7, #2
 8000abe:	8809      	ldrh	r1, [r1, #0]
 8000ac0:	400b      	ands	r3, r1
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	619a      	str	r2, [r3, #24]
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f000 fbaf 	bl	8001242 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae4:	4bcf      	ldr	r3, [pc, #828]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	220c      	movs	r2, #12
 8000aea:	4013      	ands	r3, r2
 8000aec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aee:	4bcd      	ldr	r3, [pc, #820]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	2380      	movs	r3, #128	@ 0x80
 8000af4:	025b      	lsls	r3, r3, #9
 8000af6:	4013      	ands	r3, r2
 8000af8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	d100      	bne.n	8000b06 <HAL_RCC_OscConfig+0x36>
 8000b04:	e07e      	b.n	8000c04 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d007      	beq.n	8000b1c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b0c      	cmp	r3, #12
 8000b10:	d112      	bne.n	8000b38 <HAL_RCC_OscConfig+0x68>
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d10d      	bne.n	8000b38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1c:	4bc1      	ldr	r3, [pc, #772]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	2380      	movs	r3, #128	@ 0x80
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	4013      	ands	r3, r2
 8000b26:	d100      	bne.n	8000b2a <HAL_RCC_OscConfig+0x5a>
 8000b28:	e06b      	b.n	8000c02 <HAL_RCC_OscConfig+0x132>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d167      	bne.n	8000c02 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f000 fb85 	bl	8001242 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	025b      	lsls	r3, r3, #9
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d107      	bne.n	8000b54 <HAL_RCC_OscConfig+0x84>
 8000b44:	4bb7      	ldr	r3, [pc, #732]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4bb6      	ldr	r3, [pc, #728]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	0249      	lsls	r1, r1, #9
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e027      	b.n	8000ba4 <HAL_RCC_OscConfig+0xd4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	23a0      	movs	r3, #160	@ 0xa0
 8000b5a:	02db      	lsls	r3, r3, #11
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d10e      	bne.n	8000b7e <HAL_RCC_OscConfig+0xae>
 8000b60:	4bb0      	ldr	r3, [pc, #704]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4baf      	ldr	r3, [pc, #700]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b66:	2180      	movs	r1, #128	@ 0x80
 8000b68:	02c9      	lsls	r1, r1, #11
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	4bad      	ldr	r3, [pc, #692]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4bac      	ldr	r3, [pc, #688]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	0249      	lsls	r1, r1, #9
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e012      	b.n	8000ba4 <HAL_RCC_OscConfig+0xd4>
 8000b7e:	4ba9      	ldr	r3, [pc, #676]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4ba8      	ldr	r3, [pc, #672]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b84:	49a8      	ldr	r1, [pc, #672]	@ (8000e28 <HAL_RCC_OscConfig+0x358>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	4ba6      	ldr	r3, [pc, #664]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	4013      	ands	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4ba2      	ldr	r3, [pc, #648]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4ba1      	ldr	r3, [pc, #644]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000b9e:	49a3      	ldr	r1, [pc, #652]	@ (8000e2c <HAL_RCC_OscConfig+0x35c>)
 8000ba0:	400a      	ands	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d015      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bac:	f7ff fd24 	bl	80005f8 <HAL_GetTick>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bb4:	e009      	b.n	8000bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fd1f 	bl	80005f8 <HAL_GetTick>
 8000bba:	0002      	movs	r2, r0
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b64      	cmp	r3, #100	@ 0x64
 8000bc2:	d902      	bls.n	8000bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	f000 fb3c 	bl	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bca:	4b96      	ldr	r3, [pc, #600]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	029b      	lsls	r3, r3, #10
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d0ef      	beq.n	8000bb6 <HAL_RCC_OscConfig+0xe6>
 8000bd6:	e015      	b.n	8000c04 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fd0e 	bl	80005f8 <HAL_GetTick>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be2:	f7ff fd09 	bl	80005f8 <HAL_GetTick>
 8000be6:	0002      	movs	r2, r0
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b64      	cmp	r3, #100	@ 0x64
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e326      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2380      	movs	r3, #128	@ 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	d1f0      	bne.n	8000be2 <HAL_RCC_OscConfig+0x112>
 8000c00:	e000      	b.n	8000c04 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d100      	bne.n	8000c10 <HAL_RCC_OscConfig+0x140>
 8000c0e:	e08b      	b.n	8000d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d005      	beq.n	8000c28 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	2b0c      	cmp	r3, #12
 8000c20:	d13e      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1d0>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d13b      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000c28:	4b7e      	ldr	r3, [pc, #504]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	4013      	ands	r3, r2
 8000c30:	d004      	beq.n	8000c3c <HAL_RCC_OscConfig+0x16c>
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e302      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3c:	4b79      	ldr	r3, [pc, #484]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	4a7b      	ldr	r2, [pc, #492]	@ (8000e30 <HAL_RCC_OscConfig+0x360>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	021a      	lsls	r2, r3, #8
 8000c4c:	4b75      	ldr	r3, [pc, #468]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c52:	4b74      	ldr	r3, [pc, #464]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2209      	movs	r2, #9
 8000c58:	4393      	bics	r3, r2
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	4b71      	ldr	r3, [pc, #452]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c64:	f000 fcc4 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 8000c68:	0001      	movs	r1, r0
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	220f      	movs	r2, #15
 8000c72:	4013      	ands	r3, r2
 8000c74:	4a6f      	ldr	r2, [pc, #444]	@ (8000e34 <HAL_RCC_OscConfig+0x364>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	000a      	movs	r2, r1
 8000c7a:	40da      	lsrs	r2, r3
 8000c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8000e38 <HAL_RCC_OscConfig+0x368>)
 8000c7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000c80:	4b6e      	ldr	r3, [pc, #440]	@ (8000e3c <HAL_RCC_OscConfig+0x36c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2513      	movs	r5, #19
 8000c86:	197c      	adds	r4, r7, r5
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fc6f 	bl	800056c <HAL_InitTick>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000c92:	197b      	adds	r3, r7, r5
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d046      	beq.n	8000d28 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000c9a:	197b      	adds	r3, r7, r5
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	e2d0      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d027      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2209      	movs	r2, #9
 8000cac:	4393      	bics	r3, r2
 8000cae:	0019      	movs	r1, r3
 8000cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fc9e 	bl	80005f8 <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cc0:	e008      	b.n	8000cd4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fc99 	bl	80005f8 <HAL_GetTick>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e2b6      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cd4:	4b53      	ldr	r3, [pc, #332]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d0f1      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b51      	ldr	r3, [pc, #324]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4a53      	ldr	r2, [pc, #332]	@ (8000e30 <HAL_RCC_OscConfig+0x360>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	021a      	lsls	r2, r3, #8
 8000cee:	4b4d      	ldr	r3, [pc, #308]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	e018      	b.n	8000d28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	438a      	bics	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d02:	f7ff fc79 	bl	80005f8 <HAL_GetTick>
 8000d06:	0003      	movs	r3, r0
 8000d08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fc74 	bl	80005f8 <HAL_GetTick>
 8000d10:	0002      	movs	r2, r0
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e291      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2204      	movs	r2, #4
 8000d24:	4013      	ands	r3, r2
 8000d26:	d1f1      	bne.n	8000d0c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d100      	bne.n	8000d34 <HAL_RCC_OscConfig+0x264>
 8000d32:	e0a1      	b.n	8000e78 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d140      	bne.n	8000dbc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4013      	ands	r3, r2
 8000d44:	d005      	beq.n	8000d52 <HAL_RCC_OscConfig+0x282>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e277      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d52:	4b34      	ldr	r3, [pc, #208]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a3a      	ldr	r2, [pc, #232]	@ (8000e40 <HAL_RCC_OscConfig+0x370>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d60:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d62:	430a      	orrs	r2, r1
 8000d64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	0a19      	lsrs	r1, r3, #8
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	061a      	lsls	r2, r3, #24
 8000d74:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d76:	430a      	orrs	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	0b5b      	lsrs	r3, r3, #13
 8000d80:	3301      	adds	r3, #1
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	0212      	lsls	r2, r2, #8
 8000d86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	210f      	movs	r1, #15
 8000d90:	400b      	ands	r3, r1
 8000d92:	4928      	ldr	r1, [pc, #160]	@ (8000e34 <HAL_RCC_OscConfig+0x364>)
 8000d94:	5ccb      	ldrb	r3, [r1, r3]
 8000d96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d98:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <HAL_RCC_OscConfig+0x368>)
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <HAL_RCC_OscConfig+0x36c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2513      	movs	r5, #19
 8000da2:	197c      	adds	r4, r7, r5
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fbe1 	bl	800056c <HAL_InitTick>
 8000daa:	0003      	movs	r3, r0
 8000dac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000dae:	197b      	adds	r3, r7, r5
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d060      	beq.n	8000e78 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000db6:	197b      	adds	r3, r7, r5
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	e242      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d03f      	beq.n	8000e44 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0049      	lsls	r1, r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc11 	bl	80005f8 <HAL_GetTick>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc0c 	bl	80005f8 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e229      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4013      	ands	r3, r2
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a10      	ldr	r2, [pc, #64]	@ (8000e40 <HAL_RCC_OscConfig+0x370>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	0019      	movs	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	0a19      	lsrs	r1, r3, #8
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	061a      	lsls	r2, r3, #24
 8000e1c:	4b01      	ldr	r3, [pc, #4]	@ (8000e24 <HAL_RCC_OscConfig+0x354>)
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	e029      	b.n	8000e78 <HAL_RCC_OscConfig+0x3a8>
 8000e24:	40021000 	.word	0x40021000
 8000e28:	fffeffff 	.word	0xfffeffff
 8000e2c:	fffbffff 	.word	0xfffbffff
 8000e30:	ffffe0ff 	.word	0xffffe0ff
 8000e34:	080017f4 	.word	0x080017f4
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e44:	4bbd      	ldr	r3, [pc, #756]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4bbc      	ldr	r3, [pc, #752]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000e4a:	49bd      	ldr	r1, [pc, #756]	@ (8001140 <HAL_RCC_OscConfig+0x670>)
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fbd2 	bl	80005f8 <HAL_GetTick>
 8000e54:	0003      	movs	r3, r0
 8000e56:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fbcd 	bl	80005f8 <HAL_GetTick>
 8000e5e:	0002      	movs	r2, r0
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e1ea      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e6c:	4bb3      	ldr	r3, [pc, #716]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4013      	ands	r3, r2
 8000e76:	d1f0      	bne.n	8000e5a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d036      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d019      	beq.n	8000ebe <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8a:	4bac      	ldr	r3, [pc, #688]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e8e:	4bab      	ldr	r3, [pc, #684]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fbaf 	bl	80005f8 <HAL_GetTick>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fbaa 	bl	80005f8 <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1c7      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000eb2:	4ba2      	ldr	r3, [pc, #648]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d0f1      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x3d0>
 8000ebc:	e018      	b.n	8000ef0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ebe:	4b9f      	ldr	r3, [pc, #636]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fb95 	bl	80005f8 <HAL_GetTick>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fb90 	bl	80005f8 <HAL_GetTick>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e1ad      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ee6:	4b95      	ldr	r3, [pc, #596]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eea:	2202      	movs	r2, #2
 8000eec:	4013      	ands	r3, r2
 8000eee:	d1f1      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d100      	bne.n	8000efc <HAL_RCC_OscConfig+0x42c>
 8000efa:	e0ae      	b.n	800105a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efc:	2027      	movs	r0, #39	@ 0x27
 8000efe:	183b      	adds	r3, r7, r0
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f04:	4b8d      	ldr	r3, [pc, #564]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f08:	2380      	movs	r3, #128	@ 0x80
 8000f0a:	055b      	lsls	r3, r3, #21
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d109      	bne.n	8000f24 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	4b8a      	ldr	r3, [pc, #552]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f14:	4b89      	ldr	r3, [pc, #548]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	0549      	lsls	r1, r1, #21
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8000f1e:	183b      	adds	r3, r7, r0
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	4b87      	ldr	r3, [pc, #540]	@ (8001144 <HAL_RCC_OscConfig+0x674>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d11a      	bne.n	8000f66 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f30:	4b84      	ldr	r3, [pc, #528]	@ (8001144 <HAL_RCC_OscConfig+0x674>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b83      	ldr	r3, [pc, #524]	@ (8001144 <HAL_RCC_OscConfig+0x674>)
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	0049      	lsls	r1, r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fb5b 	bl	80005f8 <HAL_GetTick>
 8000f42:	0003      	movs	r3, r0
 8000f44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f48:	f7ff fb56 	bl	80005f8 <HAL_GetTick>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	@ 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e173      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8001144 <HAL_RCC_OscConfig+0x674>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4013      	ands	r3, r2
 8000f64:	d0f0      	beq.n	8000f48 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d107      	bne.n	8000f82 <HAL_RCC_OscConfig+0x4b2>
 8000f72:	4b72      	ldr	r3, [pc, #456]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f76:	4b71      	ldr	r3, [pc, #452]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f78:	2180      	movs	r1, #128	@ 0x80
 8000f7a:	0049      	lsls	r1, r1, #1
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8000f80:	e031      	b.n	8000fe6 <HAL_RCC_OscConfig+0x516>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x4d4>
 8000f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f90:	496b      	ldr	r1, [pc, #428]	@ (8001140 <HAL_RCC_OscConfig+0x670>)
 8000f92:	400a      	ands	r2, r1
 8000f94:	651a      	str	r2, [r3, #80]	@ 0x50
 8000f96:	4b69      	ldr	r3, [pc, #420]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f9a:	4b68      	ldr	r3, [pc, #416]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000f9c:	496a      	ldr	r1, [pc, #424]	@ (8001148 <HAL_RCC_OscConfig+0x678>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fa2:	e020      	b.n	8000fe6 <HAL_RCC_OscConfig+0x516>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	23a0      	movs	r3, #160	@ 0xa0
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d10e      	bne.n	8000fce <HAL_RCC_OscConfig+0x4fe>
 8000fb0:	4b62      	ldr	r3, [pc, #392]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fb4:	4b61      	ldr	r3, [pc, #388]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	00c9      	lsls	r1, r1, #3
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	0049      	lsls	r1, r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fcc:	e00b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x516>
 8000fce:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fd4:	495a      	ldr	r1, [pc, #360]	@ (8001140 <HAL_RCC_OscConfig+0x670>)
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fda:	4b58      	ldr	r3, [pc, #352]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fde:	4b57      	ldr	r3, [pc, #348]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8000fe0:	4959      	ldr	r1, [pc, #356]	@ (8001148 <HAL_RCC_OscConfig+0x678>)
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fb03 	bl	80005f8 <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ff6:	e009      	b.n	800100c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fafe 	bl	80005f8 <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a52      	ldr	r2, [pc, #328]	@ (800114c <HAL_RCC_OscConfig+0x67c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e11a      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800100c:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 800100e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4013      	ands	r3, r2
 8001016:	d0ef      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x528>
 8001018:	e014      	b.n	8001044 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff faed 	bl	80005f8 <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001022:	e009      	b.n	8001038 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001024:	f7ff fae8 	bl	80005f8 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	4a47      	ldr	r2, [pc, #284]	@ (800114c <HAL_RCC_OscConfig+0x67c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e104      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001038:	4b40      	ldr	r3, [pc, #256]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 800103a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d1ef      	bne.n	8001024 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001044:	2327      	movs	r3, #39	@ 0x27
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d105      	bne.n	800105a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8001050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001052:	4b3a      	ldr	r3, [pc, #232]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8001054:	493e      	ldr	r1, [pc, #248]	@ (8001150 <HAL_RCC_OscConfig+0x680>)
 8001056:	400a      	ands	r2, r1
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2220      	movs	r2, #32
 8001060:	4013      	ands	r3, r2
 8001062:	d049      	beq.n	80010f8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d026      	beq.n	80010ba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8001072:	2101      	movs	r1, #1
 8001074:	430a      	orrs	r2, r1
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	4b30      	ldr	r3, [pc, #192]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 800107a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800107c:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 800107e:	2101      	movs	r1, #1
 8001080:	430a      	orrs	r2, r1
 8001082:	635a      	str	r2, [r3, #52]	@ 0x34
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <HAL_RCC_OscConfig+0x684>)
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <HAL_RCC_OscConfig+0x684>)
 800108a:	2180      	movs	r1, #128	@ 0x80
 800108c:	0189      	lsls	r1, r1, #6
 800108e:	430a      	orrs	r2, r1
 8001090:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fab1 	bl	80005f8 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800109c:	f7ff faac 	bl	80005f8 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e0c9      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2202      	movs	r2, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	d0f1      	beq.n	800109c <HAL_RCC_OscConfig+0x5cc>
 80010b8:	e01e      	b.n	80010f8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <HAL_RCC_OscConfig+0x684>)
 80010c8:	6a1a      	ldr	r2, [r3, #32]
 80010ca:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <HAL_RCC_OscConfig+0x684>)
 80010cc:	4922      	ldr	r1, [pc, #136]	@ (8001158 <HAL_RCC_OscConfig+0x688>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fa91 	bl	80005f8 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010dc:	f7ff fa8c 	bl	80005f8 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e0a9      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2202      	movs	r2, #2
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f1      	bne.n	80010dc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x632>
 8001100:	e09e      	b.n	8001240 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	d100      	bne.n	800110a <HAL_RCC_OscConfig+0x63a>
 8001108:	e077      	b.n	80011fa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110e:	2b02      	cmp	r3, #2
 8001110:	d158      	bne.n	80011c4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_RCC_OscConfig+0x66c>)
 8001118:	4910      	ldr	r1, [pc, #64]	@ (800115c <HAL_RCC_OscConfig+0x68c>)
 800111a:	400a      	ands	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fa6b 	bl	80005f8 <HAL_GetTick>
 8001122:	0003      	movs	r3, r0
 8001124:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001126:	e01b      	b.n	8001160 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff fa66 	bl	80005f8 <HAL_GetTick>
 800112c:	0002      	movs	r2, r0
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d914      	bls.n	8001160 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e083      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	40021000 	.word	0x40021000
 8001140:	fffffeff 	.word	0xfffffeff
 8001144:	40007000 	.word	0x40007000
 8001148:	fffffbff 	.word	0xfffffbff
 800114c:	00001388 	.word	0x00001388
 8001150:	efffffff 	.word	0xefffffff
 8001154:	40010000 	.word	0x40010000
 8001158:	ffffdfff 	.word	0xffffdfff
 800115c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001160:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	049b      	lsls	r3, r3, #18
 8001168:	4013      	ands	r3, r2
 800116a:	d1dd      	bne.n	8001128 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800116c:	4b37      	ldr	r3, [pc, #220]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4a37      	ldr	r2, [pc, #220]	@ (8001250 <HAL_RCC_OscConfig+0x780>)
 8001172:	4013      	ands	r3, r2
 8001174:	0019      	movs	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001184:	431a      	orrs	r2, r3
 8001186:	4b31      	ldr	r3, [pc, #196]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118c:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	0449      	lsls	r1, r1, #17
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fa2d 	bl	80005f8 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a4:	f7ff fa28 	bl	80005f8 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e045      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	049b      	lsls	r3, r3, #18
 80011be:	4013      	ands	r3, r2
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x6d4>
 80011c2:	e03d      	b.n	8001240 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 80011ca:	4922      	ldr	r1, [pc, #136]	@ (8001254 <HAL_RCC_OscConfig+0x784>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fa12 	bl	80005f8 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff fa0d 	bl	80005f8 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e02a      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	049b      	lsls	r3, r3, #18
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x70a>
 80011f8:	e022      	b.n	8001240 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e01d      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_RCC_OscConfig+0x77c>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	025b      	lsls	r3, r3, #9
 8001212:	401a      	ands	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001218:	429a      	cmp	r2, r3
 800121a:	d10f      	bne.n	800123c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	23f0      	movs	r3, #240	@ 0xf0
 8001220:	039b      	lsls	r3, r3, #14
 8001222:	401a      	ands	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001228:	429a      	cmp	r2, r3
 800122a:	d107      	bne.n	800123c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	23c0      	movs	r3, #192	@ 0xc0
 8001230:	041b      	lsls	r3, r3, #16
 8001232:	401a      	ands	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b00a      	add	sp, #40	@ 0x28
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	40021000 	.word	0x40021000
 8001250:	ff02ffff 	.word	0xff02ffff
 8001254:	feffffff 	.word	0xfeffffff

08001258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e128      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b96      	ldr	r3, [pc, #600]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d91e      	bls.n	80012b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b93      	ldr	r3, [pc, #588]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4b90      	ldr	r3, [pc, #576]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800128c:	f7ff f9b4 	bl	80005f8 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001294:	e009      	b.n	80012aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001296:	f7ff f9af 	bl	80005f8 <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4a8a      	ldr	r2, [pc, #552]	@ (80014cc <HAL_RCC_ClockConfig+0x274>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e109      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b87      	ldr	r3, [pc, #540]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2201      	movs	r2, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2202      	movs	r2, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d009      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c2:	4b83      	ldr	r3, [pc, #524]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	22f0      	movs	r2, #240	@ 0xf0
 80012c8:	4393      	bics	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	4b7f      	ldr	r3, [pc, #508]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	4013      	ands	r3, r2
 80012de:	d100      	bne.n	80012e2 <HAL_RCC_ClockConfig+0x8a>
 80012e0:	e089      	b.n	80013f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ea:	4b79      	ldr	r3, [pc, #484]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	4013      	ands	r3, r2
 80012f4:	d120      	bne.n	8001338 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0e1      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001302:	4b73      	ldr	r3, [pc, #460]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	049b      	lsls	r3, r3, #18
 800130a:	4013      	ands	r3, r2
 800130c:	d114      	bne.n	8001338 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0d5      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d106      	bne.n	8001328 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131a:	4b6d      	ldr	r3, [pc, #436]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	d109      	bne.n	8001338 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0ca      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001328:	4b69      	ldr	r3, [pc, #420]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0c2      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001338:	4b65      	ldr	r3, [pc, #404]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2203      	movs	r2, #3
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4b62      	ldr	r3, [pc, #392]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff f954 	bl	80005f8 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d111      	bne.n	8001380 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800135c:	e009      	b.n	8001372 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7ff f94b 	bl	80005f8 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a58      	ldr	r2, [pc, #352]	@ (80014cc <HAL_RCC_ClockConfig+0x274>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e0a5      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001372:	4b57      	ldr	r3, [pc, #348]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	220c      	movs	r2, #12
 8001378:	4013      	ands	r3, r2
 800137a:	2b08      	cmp	r3, #8
 800137c:	d1ef      	bne.n	800135e <HAL_RCC_ClockConfig+0x106>
 800137e:	e03a      	b.n	80013f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d111      	bne.n	80013ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	e009      	b.n	800139e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138a:	f7ff f935 	bl	80005f8 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a4d      	ldr	r2, [pc, #308]	@ (80014cc <HAL_RCC_ClockConfig+0x274>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e08f      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139e:	4b4c      	ldr	r3, [pc, #304]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	220c      	movs	r2, #12
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d1ef      	bne.n	800138a <HAL_RCC_ClockConfig+0x132>
 80013aa:	e024      	b.n	80013f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d11b      	bne.n	80013ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013b4:	e009      	b.n	80013ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b6:	f7ff f91f 	bl	80005f8 <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	4a42      	ldr	r2, [pc, #264]	@ (80014cc <HAL_RCC_ClockConfig+0x274>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e079      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ca:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	220c      	movs	r2, #12
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d1ef      	bne.n	80013b6 <HAL_RCC_ClockConfig+0x15e>
 80013d6:	e00e      	b.n	80013f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d8:	f7ff f90e 	bl	80005f8 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	4a3a      	ldr	r2, [pc, #232]	@ (80014cc <HAL_RCC_ClockConfig+0x274>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e068      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80013ec:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f6:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d21e      	bcs.n	8001442 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001416:	f7ff f8ef 	bl	80005f8 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	e009      	b.n	8001434 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001420:	f7ff f8ea 	bl	80005f8 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	4a28      	ldr	r2, [pc, #160]	@ (80014cc <HAL_RCC_ClockConfig+0x274>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e044      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_RCC_ClockConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d1ee      	bne.n	8001420 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2204      	movs	r2, #4
 8001448:	4013      	ands	r3, r2
 800144a:	d009      	beq.n	8001460 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800144c:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4a20      	ldr	r2, [pc, #128]	@ (80014d4 <HAL_RCC_ClockConfig+0x27c>)
 8001452:	4013      	ands	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2208      	movs	r2, #8
 8001466:	4013      	ands	r3, r2
 8001468:	d00a      	beq.n	8001480 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <HAL_RCC_ClockConfig+0x280>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00da      	lsls	r2, r3, #3
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001480:	f000 f8b6 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 8001484:	0001      	movs	r1, r0
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_RCC_ClockConfig+0x278>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	220f      	movs	r2, #15
 800148e:	4013      	ands	r3, r2
 8001490:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <HAL_RCC_ClockConfig+0x284>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	000a      	movs	r2, r1
 8001496:	40da      	lsrs	r2, r3
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_RCC_ClockConfig+0x288>)
 800149a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_RCC_ClockConfig+0x28c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	250b      	movs	r5, #11
 80014a2:	197c      	adds	r4, r7, r5
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff f861 	bl	800056c <HAL_InitTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80014b6:	197b      	adds	r3, r7, r5
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	e000      	b.n	80014be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b004      	add	sp, #16
 80014c4:	bdb0      	pop	{r4, r5, r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	40022000 	.word	0x40022000
 80014cc:	00001388 	.word	0x00001388
 80014d0:	40021000 	.word	0x40021000
 80014d4:	fffff8ff 	.word	0xfffff8ff
 80014d8:	ffffc7ff 	.word	0xffffc7ff
 80014dc:	080017f4 	.word	0x080017f4
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08d      	sub	sp, #52	@ 0x34
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80014f4:	241c      	movs	r4, #28
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	0018      	movs	r0, r3
 80014fa:	2314      	movs	r3, #20
 80014fc:	001a      	movs	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	f000 f940 	bl	8001784 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001504:	0020      	movs	r0, r4
 8001506:	183b      	adds	r3, r7, r0
 8001508:	2202      	movs	r2, #2
 800150a:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800150c:	183b      	adds	r3, r7, r0
 800150e:	2202      	movs	r2, #2
 8001510:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8001512:	183b      	adds	r3, r7, r0
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d11a      	bne.n	8001554 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800151e:	183b      	adds	r3, r7, r0
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	0052      	lsls	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8001526:	183b      	adds	r3, r7, r0
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 800152e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001530:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 8001532:	2101      	movs	r1, #1
 8001534:	430a      	orrs	r2, r1
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 800153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001544:	183a      	adds	r2, r7, r0
 8001546:	23a0      	movs	r3, #160	@ 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff f911 	bl	8000774 <HAL_GPIO_Init>
 8001552:	e038      	b.n	80015c6 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d11a      	bne.n	8001590 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 800155a:	201c      	movs	r0, #28
 800155c:	183b      	adds	r3, r7, r0
 800155e:	2280      	movs	r2, #128	@ 0x80
 8001560:	0192      	lsls	r2, r2, #6
 8001562:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8001564:	183b      	adds	r3, r7, r0
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 800156c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 8001570:	2102      	movs	r1, #2
 8001572:	430a      	orrs	r2, r1
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8001582:	183b      	adds	r3, r7, r0
 8001584:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <HAL_RCC_MCOConfig+0x100>)
 8001586:	0019      	movs	r1, r3
 8001588:	0010      	movs	r0, r2
 800158a:	f7ff f8f3 	bl	8000774 <HAL_GPIO_Init>
 800158e:	e01a      	b.n	80015c6 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8001590:	201c      	movs	r0, #28
 8001592:	183b      	adds	r3, r7, r0
 8001594:	2280      	movs	r2, #128	@ 0x80
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 800159a:	183b      	adds	r3, r7, r0
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 80015a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80015b8:	183a      	adds	r2, r7, r0
 80015ba:	23a0      	movs	r3, #160	@ 0xa0
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff f8d7 	bl	8000774 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <HAL_RCC_MCOConfig+0x104>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_RCC_MCOConfig+0xfc>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]
}
 80015dc:	46c0      	nop			@ (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b00d      	add	sp, #52	@ 0x34
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	40021000 	.word	0x40021000
 80015e8:	50000400 	.word	0x50000400
 80015ec:	80ffffff 	.word	0x80ffffff

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	220c      	movs	r2, #12
 8001600:	4013      	ands	r3, r2
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d013      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x3e>
 8001606:	d85c      	bhi.n	80016c2 <HAL_RCC_GetSysClockFreq+0xd2>
 8001608:	2b04      	cmp	r3, #4
 800160a:	d002      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x22>
 800160c:	2b08      	cmp	r3, #8
 800160e:	d00b      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x38>
 8001610:	e057      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001612:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2210      	movs	r2, #16
 8001618:	4013      	ands	r3, r2
 800161a:	d002      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800161c:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800161e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001620:	e05d      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001622:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001624:	613b      	str	r3, [r7, #16]
      break;
 8001626:	e05a      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800162a:	613b      	str	r3, [r7, #16]
      break;
 800162c:	e057      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	220f      	movs	r2, #15
 8001634:	4013      	ands	r3, r2
 8001636:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	0d9b      	lsrs	r3, r3, #22
 8001640:	2203      	movs	r2, #3
 8001642:	4013      	ands	r3, r2
 8001644:	3301      	adds	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	4013      	ands	r3, r2
 8001652:	d00f      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	000a      	movs	r2, r1
 8001658:	0152      	lsls	r2, r2, #5
 800165a:	1a52      	subs	r2, r2, r1
 800165c:	0193      	lsls	r3, r2, #6
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	185b      	adds	r3, r3, r1
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	0018      	movs	r0, r3
 800166a:	f7fe fd4d 	bl	8000108 <__udivsi3>
 800166e:	0003      	movs	r3, r0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e023      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2210      	movs	r2, #16
 800167a:	4013      	ands	r3, r2
 800167c:	d00f      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	000a      	movs	r2, r1
 8001682:	0152      	lsls	r2, r2, #5
 8001684:	1a52      	subs	r2, r2, r1
 8001686:	0193      	lsls	r3, r2, #6
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	185b      	adds	r3, r3, r1
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	0018      	movs	r0, r3
 8001694:	f7fe fd38 	bl	8000108 <__udivsi3>
 8001698:	0003      	movs	r3, r0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00e      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	000a      	movs	r2, r1
 80016a2:	0152      	lsls	r2, r2, #5
 80016a4:	1a52      	subs	r2, r2, r1
 80016a6:	0193      	lsls	r3, r2, #6
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	185b      	adds	r3, r3, r1
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7fe fd28 	bl	8000108 <__udivsi3>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
      break;
 80016c0:	e00d      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0b5b      	lsrs	r3, r3, #13
 80016c8:	2207      	movs	r2, #7
 80016ca:	4013      	ands	r3, r2
 80016cc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	0212      	lsls	r2, r2, #8
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      break;
 80016dc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016de:	693b      	ldr	r3, [r7, #16]
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b006      	add	sp, #24
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	003d0900 	.word	0x003d0900
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	08001804 	.word	0x08001804

080016f8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8001700:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_RCCEx_CRSConfig+0x7c>)
 8001702:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCCEx_CRSConfig+0x7c>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	0509      	lsls	r1, r1, #20
 800170a:	430a      	orrs	r2, r1
 800170c:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_CRS_RELEASE_RESET();
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_RCCEx_CRSConfig+0x7c>)
 8001710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_RCCEx_CRSConfig+0x7c>)
 8001714:	4918      	ldr	r1, [pc, #96]	@ (8001778 <HAL_RCCEx_CRSConfig+0x80>)
 8001716:	400a      	ands	r2, r1
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4313      	orrs	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_RCCEx_CRSConfig+0x84>)
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_RCCEx_CRSConfig+0x84>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <HAL_RCCEx_CRSConfig+0x88>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	021a      	lsls	r2, r3, #8
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_RCCEx_CRSConfig+0x84>)
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <HAL_RCCEx_CRSConfig+0x84>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_RCCEx_CRSConfig+0x84>)
 8001764:	2160      	movs	r1, #96	@ 0x60
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	40021000 	.word	0x40021000
 8001778:	f7ffffff 	.word	0xf7ffffff
 800177c:	40006c00 	.word	0x40006c00
 8001780:	ffffc0ff 	.word	0xffffc0ff

08001784 <memset>:
 8001784:	0003      	movs	r3, r0
 8001786:	1882      	adds	r2, r0, r2
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	7019      	strb	r1, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <__libc_init_array>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	2600      	movs	r6, #0
 8001798:	4c0c      	ldr	r4, [pc, #48]	@ (80017cc <__libc_init_array+0x38>)
 800179a:	4d0d      	ldr	r5, [pc, #52]	@ (80017d0 <__libc_init_array+0x3c>)
 800179c:	1b64      	subs	r4, r4, r5
 800179e:	10a4      	asrs	r4, r4, #2
 80017a0:	42a6      	cmp	r6, r4
 80017a2:	d109      	bne.n	80017b8 <__libc_init_array+0x24>
 80017a4:	2600      	movs	r6, #0
 80017a6:	f000 f819 	bl	80017dc <_init>
 80017aa:	4c0a      	ldr	r4, [pc, #40]	@ (80017d4 <__libc_init_array+0x40>)
 80017ac:	4d0a      	ldr	r5, [pc, #40]	@ (80017d8 <__libc_init_array+0x44>)
 80017ae:	1b64      	subs	r4, r4, r5
 80017b0:	10a4      	asrs	r4, r4, #2
 80017b2:	42a6      	cmp	r6, r4
 80017b4:	d105      	bne.n	80017c2 <__libc_init_array+0x2e>
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	00b3      	lsls	r3, r6, #2
 80017ba:	58eb      	ldr	r3, [r5, r3]
 80017bc:	4798      	blx	r3
 80017be:	3601      	adds	r6, #1
 80017c0:	e7ee      	b.n	80017a0 <__libc_init_array+0xc>
 80017c2:	00b3      	lsls	r3, r6, #2
 80017c4:	58eb      	ldr	r3, [r5, r3]
 80017c6:	4798      	blx	r3
 80017c8:	3601      	adds	r6, #1
 80017ca:	e7f2      	b.n	80017b2 <__libc_init_array+0x1e>
 80017cc:	08001810 	.word	0x08001810
 80017d0:	08001810 	.word	0x08001810
 80017d4:	08001814 	.word	0x08001814
 80017d8:	08001810 	.word	0x08001810

080017dc <_init>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr

080017e8 <_fini>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr
